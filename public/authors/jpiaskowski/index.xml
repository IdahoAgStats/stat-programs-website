<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia Piaskowski | Idaho Ag Stats</title>
    <link>/authors/jpiaskowski/</link>
      <atom:link href="/authors/jpiaskowski/index.xml" rel="self" type="application/rss+xml" />
    <description>Julia Piaskowski</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright @ 2022 by the [University of Idaho Statistical Programs](https://www.uidaho.edu/cals/statistical-programs). Built with [Wowchemy](https://wowchemy.com/), a free open-source web builder.</copyright><lastBuildDate>Mon, 16 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/authors/jpiaskowski/avatar_hue4a77a7c1beaa41bc4aa3fc7c99a9d6f_6498082_270x270_fill_lanczos_center_2.png</url>
      <title>Julia Piaskowski</title>
      <link>/authors/jpiaskowski/</link>
    </image>
    
    <item>
      <title>Tools and Resources for R Users in Agricultural Research</title>
      <link>/events/presentations/agstats-conference-2022/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      <guid>/events/presentations/agstats-conference-2022/</guid>
      <description>&lt;p&gt;This is a part of an effort to establish a CRAN task view for agricultural research. Feel free to contribute to this at our &lt;a href=&#34;https://github.com/IdahoAgStats/ctv-agriculture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;. You can find a prose version of this poster &lt;a href=&#34;/post/keeping-up-with-r/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R packages for Agricultural Research</title>
      <link>/post/keeping-up-with-r/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      <guid>/post/keeping-up-with-r/</guid>
      <description>&lt;p&gt;Finding the R packages that support your work can be challenging. Keeping up with the ongoing changes that occur in the R package ecosystem can be even harder. There are tools out there to ease this burden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/views/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN Task Views&lt;/a&gt; These topic-specific resources are intended as a general guide to R packages relevant to a topic. They are not exhaustive lists of every possible package. There is not an agricultural CRAN task view&amp;hellip;.yet (hence this blog post).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Open Science&lt;/a&gt; is running a new tool, &lt;a href=&#34;https://r-universe.dev/search/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Universe&lt;/a&gt; to provide organization-specific resources for package discovery and exploration. Idaho Ag Stats is running an &lt;a href=&#34;https://idahoagstats.r-universe.dev/ui#packages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ag stats universe&lt;/a&gt; for the packages described in this post.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rweekly.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R weekly&lt;/a&gt; provides weekly curated summaries by rotating curators on major developments in R. They have an RSS feed, too!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a compiled list of know R resources supporting agricultural research. Agriculture encompasses a broad breadth of disciplines. Many, many package in base R and contributed packages are useful to agricultural researchers. For that reason, this is not exhaustive list. It is intended to cover major packages that in most cases, have been developed to support agricultural research and analytical needs.&lt;/p&gt;
&lt;p&gt;Note that some of these packages are on CRAN and others are on GitHub, Bioconductor, or R-forge.&lt;/p&gt;
&lt;p&gt;If you think that a package is missing from the list, please &lt;a href=&#34;https://github.com/IdahoAgStats/ctv-agriculture/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open an issue&lt;/a&gt; on the GitHub repo for this topic.&lt;/p&gt;
&lt;h2 id=&#34;core-packages-with-general-applications&#34;&gt;Core Packages with general applications&lt;/h2&gt;
&lt;h3 id=&#34;agricultural-and-landuse-databases&#34;&gt;Agricultural and landuse databases&lt;/h3&gt;
&lt;p&gt;Data from the United States Department of Agriculture&amp;rsquo;s National Agricultural Statistical Service &amp;lsquo;&lt;a href=&#34;https://www.nass.usda.gov/Quick_Stats/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quick Stats&lt;/a&gt;&amp;rsquo; web API can be accessed with &lt;a href=&#34;https://CRAN.R-project.org/package=rnassqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rnassqs&lt;/a&gt; or with &lt;a href=&#34;https://CRAN.R-project.org/package=tidyUSDA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyUSDA&lt;/a&gt;, which also offers some mapping capabilities. The USDA&amp;rsquo;s &lt;a href=&#34;https://nassgeodata.gmu.edu/CropScape/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cropland Data Layer&lt;/a&gt; API can be accessed with &lt;a href=&#34;https://CRAN.R-project.org/package=CropScapeR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CropScapeR&lt;/a&gt; and &lt;a href=&#34;https://CRAN.R-project.org/package=cdlTools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cdlTools&lt;/a&gt; provides various utility functions for processing CDL data. The package &lt;a href=&#34;https://CRAN.R-project.org/package=rusda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rusda&lt;/a&gt; provides an interface to access the USDA-ARS Systematic Mycology and Microbiology Laboratory (SMML)&amp;rsquo;s &lt;a href=&#34;https://nt.ars-grin.gov/fungaldatabases/Literature/Literature.cfm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;four databases&lt;/a&gt;: Fungus-Host Distributions, Specimens, Literature and the Nomenclature database. USDA&amp;rsquo;s Agricultural Resource Management Survey (&lt;a href=&#34;https://www.nass.usda.gov/Surveys/Guide_to_NASS_Surveys/Ag_Resource_Management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ARMS&lt;/a&gt;) data API can be accessed with &lt;a href=&#34;https://CRAN.R-project.org/package=rarms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rarms&lt;/a&gt;. The USDA&amp;rsquo;s Livestock Mandatory Reporting data API can be accessed with &lt;a href=&#34;https://CRAN.R-project.org/package=usdampr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usdampr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=FAOSTAT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAOSTAT&lt;/a&gt; and &lt;a href=&#34;https://github.com/muuankarski/faobulk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;faobulk&lt;/a&gt; can be used to access data from the &lt;a href=&#34;https://www.fao.org/faostat/en/#home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAOSTAT Database&lt;/a&gt; of the Food and Agricultural Organization (FAO) of the United Nations.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=FedData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FedData&lt;/a&gt; provides access to geospatial data from The Soil Survey Geographic (&lt;a href=&#34;https://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/survey/?cid=nrcs142p2_053627&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSURGO&lt;/a&gt;) database, the Global Historical Climatology Network (&lt;a href=&#34;https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GHCN&lt;/a&gt;), the Daymet gridded estimates of daily weather parameters for North America, the &lt;a href=&#34;https://catalog.data.gov/dataset/international-tree-ring-data-bank-itrdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;International Tree Ring Data Bank&lt;/a&gt;, and the &lt;a href=&#34;https://www.usgs.gov/centers/eros/science/national-land-cover-database#overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;National Land Cover Database&lt;/a&gt;. The NOAA database API can be acccessed with &lt;a href=&#34;https://CRAN.R-project.org/package=rnoaa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rnoaa&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;data-sets&#34;&gt;Data sets&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=agridat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Agridat&lt;/a&gt; consists of a very large collection of agricultural data sets and example analyses; the package contains a vignette detailing additional data sets and extensive resources to support agricultural analysis. &lt;a href=&#34;https://CRAN.R-project.org/package=agriTutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agriTutorial&lt;/a&gt; provides a collection of agricultural data sets and analysis with particular attention to crop experiments. On GitHub, the repository &lt;a href=&#34;https://github.com/OnofriAndreaPG/agriCensData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agroBioData&lt;/a&gt; houses a collection of data sets supporting agriculture and applied biology (note that this is a collection of CSV files, not a package). The &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/28724064/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;soybean nested associated mapping population data set&lt;/a&gt; can be accessed via &lt;a href=&#34;https://CRAN.R-project.org/package=SoyNAM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SoyNAM&lt;/a&gt;.  &lt;a href=&#34;https://github.com/samuelbfernandes/simplePHENOTYPES&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simplePhenotypes&lt;/a&gt; can be used for simulating pleiotropic, linked and epistatic phenotypes. USGS county data on fertilizer sales can be explored with &lt;a href=&#34;https://github.com/wenlong-liu/ggfertilizer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggfertilizer&lt;/a&gt;. The FAOSTAT data set collection on the Food and Agriculture Biomass Input–Output model (FABIO) is available through &lt;a href=&#34;https://github.com/fineprint-global/fabio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fabio&lt;/a&gt; and described more in detail in &lt;a href=&#34;https://pubs.acs.org/doi/10.1021/acs.est.9b03554&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bruckner 2019&lt;/a&gt;. The R-forge subversion repository &lt;a href=&#34;https://r-forge.r-project.org/scm/viewvc.php/pkg/?root=cropcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;lsquo;cropcc&amp;rsquo;&lt;/a&gt; hosts several R packages with climate change/cropping data set. Additionally, many  of the agriculture-focused packages listed in this guide also include data sets to illustrate their functionality (e.g. &lt;a href=&#34;https://CRAN.R-project.org/package=BGLR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BGLR&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=agricolae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agricolae&lt;/a&gt;, &lt;a href=&#34;https://github.com/lian0090/FW/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FW&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;general-analytical-packages-supporting-agricultural-research&#34;&gt;General analytical packages supporting agricultural research&lt;/h3&gt;
&lt;p&gt;The package &lt;a href=&#34;https://cran.r-project.org/package=nlraa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nlraa&lt;/a&gt; provides nonlinear regression fucntions specifically for agricultural applications. &lt;a href=&#34;https://github.com/OnofriAndreaPG/agriCensData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agriCensData&lt;/a&gt; is a flexible package for working with censored data (e.g. time to flowering, instrumentation values below the detection limit, disease scoring). The R suite of linear and non-linear modelling packages, &lt;a href=&#34;https://CRAN.R-project.org/package=nlme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nlme&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=lme4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lme4&lt;/a&gt;, and &lt;a href=&#34;https://CRAN.R-project.org/package=MCMCglmm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MCMCglmm&lt;/a&gt; are useful for analysing a wide array of studies. The accessory package &lt;a href=&#34;https://CRAN.R-project.org/package=emmeans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emmeans&lt;/a&gt; works with those packages (and more) to calculated the estimated marginal means for the independent variables. The CRAN task view on &lt;a href=&#34;https://cran.r-project.org/web/views/MissingData.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MissingData&lt;/a&gt; is helpful for understanding how to impute for missing data. See the &lt;a href=&#34;https://cran.r-project.org/web/views/MetaAnalysis.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meta-analysis CRAN task view&lt;/a&gt; for packages supporting meta-analyses.&lt;/p&gt;
&lt;h2 id=&#34;discipline-specific-packages&#34;&gt;Discipline-specific packages&lt;/h2&gt;
&lt;h3 id=&#34;agricultural-economics&#34;&gt;Agricultural economics&lt;/h3&gt;
&lt;p&gt;The task views for &lt;a href=&#34;https://cran.rstudio.com/web/views/Econometrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Econometrics&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/web/views/Finance.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Empirical Finance&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/web/views/TimeSeries.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TimeSeries&lt;/a&gt; provide information on packages and tools relevant to agriculture economics.&lt;/p&gt;
&lt;h3 id=&#34;agronomic-trials&#34;&gt;Agronomic trials&lt;/h3&gt;
&lt;h4 id=&#34;experimental-design&#34;&gt;Experimental design&lt;/h4&gt;
&lt;p&gt;The package &lt;a href=&#34;https://CRAN.R-project.org/package=agricolae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agricolae&lt;/a&gt; provides extensive resources for the planning and analysis of planned field experiments. The CRAN task for &lt;a href=&#34;https://cran.rstudio.com/web/views/Econometrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExperimentalDesign&lt;/a&gt; provide additional information on experimental design for a wide variety of research problems. &lt;a href=&#34;https://CRAN.R-project.org/package=desplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;desplot&lt;/a&gt; is for plotting maps of agricultural trials laid out in grids.&lt;/p&gt;
&lt;h4 id=&#34;general-analysis&#34;&gt;General analysis&lt;/h4&gt;
&lt;p&gt;The package &lt;a href=&#34;https://CRAN.R-project.org/package=agricolae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agricolae&lt;/a&gt; contains functions for analyzing many common designs in agriculture trials such as split plot, lattice, Latin square and some additional functions such AMMI and AUDPC calculations. &lt;a href=&#34;https://CRAN.R-project.org/package=statgenSTA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenSTA&lt;/a&gt; has functions for single trial analysis with and without spatial components. The proprietary software &lt;a href=&#34;https://www.vsni.co.uk/software/asreml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asreml&lt;/a&gt; provides an R version of their mixed model fitting functions for field trial analysis (note this is not open source and also requires an annual license). CRAN also contains an add-on package &lt;a href=&#34;https://CRAN.R-project.org/package=asremlPlus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asremlPlus&lt;/a&gt; that provides several accessory functions to asreml. &lt;a href=&#34;https://github.com/inbo/INLA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;INLA&lt;/a&gt; provides tools for Bayesian inference of latent Gaussian models. It was developed specifically for agriculture and contains functions for modelling spatial variation in field experiments.&lt;/p&gt;
&lt;h4 id=&#34;genotype-by-environment-interactions&#34;&gt;Genotype-by-environment interactions&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=statgenGxE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenGxE&lt;/a&gt; has several functions for handling various analytical approaches for addressing genotype-by-environment interactions. &lt;a href=&#34;https://CRAN.R-project.org/package=IBCF.MTME&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBCF.MTME&lt;/a&gt; implements item-based collaborative filtering for multi-trait and multi-environment trials following &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/29097376/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Montesinos-López 2018&lt;/a&gt;. The package &lt;a href=&#34;https://CRAN.R-project.org/package=gge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gge&lt;/a&gt; is useful for producing GGE biplots, while &lt;a href=&#34;https://CRAN.R-project.org/package=bayesammi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bayesammi&lt;/a&gt; can conduct Bayesian estimation of additive main effects multiplicative interaction model. &lt;a href=&#34;https://github.com/allogamous/EnvRtype&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EnvRtype&lt;/a&gt; can be used for assembling climate data, data set preparation and environmental classification. &lt;a href=&#34;https://github.com/lian0090/FW/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FW&lt;/a&gt; implements Finlay-Wilkinson regression using a Gibbs sampler.&lt;/p&gt;
&lt;h4 id=&#34;high-throughput-phenotyping-htp&#34;&gt;High throughput phenotyping (HTP)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=statgenHTP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenHTP&lt;/a&gt; is for analyzing data from HTP platform experiments, with some functions specifically designed to work with the proprietary software &lt;a href=&#34;https://www.vsni.co.uk/software/asreml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asreml&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;animal-science&#34;&gt;Animal science&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=usdampr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usdampr&lt;/a&gt; provides access to the USDA&amp;rsquo;s Livestock Mandatory Reporting API. Many of the genetic packages described in this resource can also be applied to animal breeders.&lt;/p&gt;
&lt;h3 id=&#34;breeding-and-genetics&#34;&gt;Breeding and genetics&lt;/h3&gt;
&lt;p&gt;See the &lt;a href=&#34;https://cran.r-project.org/web/views/Phylogenetics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phylogenetics CRAN task view&lt;/a&gt; describing R packages for taxonomy, community ecology (including microbiome work) and of course, phylogenetics. In addition, the R package repository &lt;a href=&#34;https://www.bioconductor.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bionconductor&lt;/a&gt; provides bioinformatics tools for the processing of high-throughput genomic data. &lt;a href=&#34;https://CRAN.R-project.org/package=lmDiallel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lmDiallel&lt;/a&gt; provides service functions for analysing data sets obtained from diallel experiments, as described in &lt;a href=&#34;https://doi.org/10.1007%2Fs00122-020-03716-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Onofri 2020&lt;/a&gt;. &lt;a href=&#34;https://r-forge.r-project.org/projects/plantbreeding/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plantbreeding&lt;/a&gt; (available on R-forge: &lt;code&gt;install.packages(&amp;quot;plantbreeding&amp;quot;, repos=&amp;quot;http://R-Forge.R-project.org&amp;quot;)&lt;/code&gt;) provides many convenience functions for working with populations and designs common in plant breeding including dialleles, line testers, augmented trials, the Carolina design, and more. &lt;a href=&#34;https://github.com/reyzaguirre/st4gi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;st4gi&lt;/a&gt; provides several general functions for genetic improvement of crops.&lt;/p&gt;
&lt;h4 id=&#34;linkage-mapping--qtl-analysis&#34;&gt;Linkage mapping &amp;amp; QTL analysis&lt;/h4&gt;
&lt;p&gt;There are two notable and long-standing packages: (1) &lt;a href=&#34;https://CRAN.R-project.org/package=onemap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;onemap&lt;/a&gt;, providing MapMaker/EXP like performance and extended functionality, and (2) &lt;a href=&#34;https://CRAN.R-project.org/package=qtl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;qtl&lt;/a&gt; providing standard functionality for qtl mapping and  accessory functions for simulating crosses. &lt;a href=&#34;https://CRAN.R-project.org/package=ASMap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASMap&lt;/a&gt; is for fast linkage mapping with the algorithm &amp;lsquo;MSTmap&amp;rsquo;. &lt;a href=&#34;https://github.com/jendelman/MapRtools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MapRtools&lt;/a&gt; is provides miscellaneous functions for linkage mapping and exploration. A existing linkage map can be visualized with &lt;a href=&#34;https://CRAN.R-project.org/package=LinkageMapView&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkageMapView&lt;/a&gt;. For polyploids, the packages &lt;a href=&#34;https://CRAN.R-project.org/package=mappoly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mappoly&lt;/a&gt; and &lt;a href=&#34;https://CRAN.R-project.org/package=polymapR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;polymapR&lt;/a&gt; can be used for linkage mapping and the packages &lt;a href=&#34;https://CRAN.R-project.org/package=qtlpoly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;qtlpoly&lt;/a&gt; and &lt;a href=&#34;https://CRAN.R-project.org/package=polyqtlR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;polyqtlR&lt;/a&gt; can be used for qtl estimation. &lt;a href=&#34;https://github.com/jendelman/diaQTL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;diaQTL&lt;/a&gt; is for QTL and haplotype analysis of diallel populations (diploid and autotetraploid). &lt;a href=&#34;https://CRAN.R-project.org/package=statgenMPP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenMPP&lt;/a&gt; can conduct QTL mapping in multi-parent populations.&lt;/p&gt;
&lt;h4 id=&#34;gwas&#34;&gt;GWAS&lt;/h4&gt;
&lt;p&gt;Genome-wide association study analysis can be conducted with &lt;a href=&#34;https://CRAN.R-project.org/package=statgenGWAS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenGWAS&lt;/a&gt;. GWAS models across very large number of SNPs or observations can be estimated with &lt;a href=&#34;https://CRAN.R-project.org/package=rMVP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rMVP&lt;/a&gt; and &lt;a href=&#34;https://github.com/deruncie/MegaLMM/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;megaLMM&lt;/a&gt;. Functions for autotetraploids are provided by &lt;a href=&#34;https://github.com/jendelman/GWASpoly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GWASpoly&lt;/a&gt;, and these functions also work in diploid species. &lt;a href=&#34;https://github.com/jendelman/StageWise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StageWise&lt;/a&gt; provides functions to conduct a 2-stage GWAS when the underlying phenotypic data are from multiple field trials.&lt;/p&gt;
&lt;h4 id=&#34;general-genetic-prediction&#34;&gt;General Genetic Prediction&lt;/h4&gt;
&lt;p&gt;Packages supporting genetic prediction from pedigree or genetic marker data include &lt;a href=&#34;https://CRAN.R-project.org/package=sommer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sommer&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=rrBLUP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rrBLUP&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=BGLR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BGLR&lt;/a&gt;, &lt;a href=&#34;https://github.com/perpdgo/lme4GS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lme4gs&lt;/a&gt;, &lt;a href=&#34;https://github.com/variani/lme4qtl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lme4qtl&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=pedigreemm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pedigreemm&lt;/a&gt;, &lt;a href=&#34;https://CRAN.R-project.org/package=qgtools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;qgtools&lt;/a&gt; and the licensed software &lt;a href=&#34;https://www.vsni.co.uk/software/asreml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asreml&lt;/a&gt;. Many of these packages have built-in functionality for data preparation steps including data imputation and calculation of the relationship matrices. &lt;a href=&#34;https://CRAN.R-project.org/package=AGHmatrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AGHmatrix&lt;/a&gt; provides extensive options for calculating pedigree and genomic (additive and dominance) relationship matrices and &lt;a href=&#34;https://CRAN.R-project.org/package=statgenIBD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statgenIBD&lt;/a&gt; can calculate IBD probabilities for biparental, three and four-way crosses. &lt;a href=&#34;https://github.com/famuvie/breedR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;breedR&lt;/a&gt; is a general purpose package for performing quantitative genetic analyses. For polyploids, &lt;a href=&#34;https://github.com/jendelman/polyBreedR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;polyBreedR&lt;/a&gt; provides convenience functions to facilitate the use of genome-wide markers for breeding autotetraploid species, and its functionality also extends to diploids.&lt;/p&gt;
&lt;h3 id=&#34;crop-modelling&#34;&gt;Crop Modelling&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://CRAN.R-project.org/package=apsimx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apsimx&lt;/a&gt; package has functions to read, inspect, edit and run files for APSIM &amp;ldquo;Next Generation&amp;rdquo; (json) and APSIM &amp;ldquo;Classic&amp;rdquo; (xml). Files with an &lt;code&gt;.apsim&lt;/code&gt; extension correspond to APSIM Classic, the files with an &lt;code&gt;.apsimx&lt;/code&gt; extension correspond to APSIM Next Generation. &lt;a href=&#34;https://CRAN.R-project.org/package=rapsimng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rapsimng&lt;/a&gt; works with Next Generation APSIM files. &lt;a href=&#34;https://CRAN.R-project.org/package=DSSAT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DSSAT&lt;/a&gt; provides a comprehensive R interface to the Decision Support System for Agrotechnology Transfer Cropping Systems model (DSSAT-CSM) documented by &lt;a href=&#34;https://doi.org/10.1016/S1161-0301%2802%2900107-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jones et al (2003)&lt;/a&gt;. This package provides cross-platform functions to read and write input files, run DSSAT-CSM, and read output files.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=meteor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meteor&lt;/a&gt; provides a set of functions for weather and climate data manipulation to support crop and crop disease modeling.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cropmodels/phenorice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phenorice&lt;/a&gt; is an R implementation of the &lt;a href=&#34;http://dx.doi.org/10.1016/j.rse.2017.03.029&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phenorice model&lt;/a&gt; for remote sensing of rice crop production. &lt;a href=&#34;https://github.com/lbusett/phenoriceR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phenoriceR&lt;/a&gt; provides helper functions for processing data from the phenorice model. &lt;a href=&#34;https://CRAN.R-project.org/package=Recocrop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Recocrop&lt;/a&gt; estimates environmental suitability for plants using a limiting factor approach for plant growth following &lt;a href=&#34;https://doi:10.1007/BF00045728&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hackett 1991&lt;/a&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=Rquefts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rquefts&lt;/a&gt; provides an implementation of the QUEFTS (Quantitative Evaluation of the Native Fertility of Tropical Soils) model (&lt;a href=&#34;https://doi.org/10.1016%2F0016-7061%2890%2990021-Z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Janssen 1990&lt;/a&gt;). &lt;a href=&#34;https://CRAN.R-project.org/package=Rwofost&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rwofost&lt;/a&gt; is an implementation of the WOFOST (&amp;ldquo;World Food Studies&amp;rdquo;) crop growth model(&lt;a href=&#34;https://doi.org/10.1016%2Fj.agsy.2018.06.018&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;De Wit 2019&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;entomology&#34;&gt;Entomology&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=hnp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hnp&lt;/a&gt; Generates half-normal plots with simulation envelopes using different diagnostics from a range of different fitted models. A few example datasets are included. The package &lt;a href=&#34;https://github.com/OnofriAndreaPG/agriCensData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agriCensData&lt;/a&gt; provides functions for dealing with censored data. In addition, the &lt;a href=&#34;https://cran.microsoft.com/snapshot/2022-03-27/web/views/Survival.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;survival CRAN Task View&lt;/a&gt; list CRAN resources for working with censored data.&lt;/p&gt;
&lt;h3 id=&#34;food-science&#34;&gt;Food science&lt;/h3&gt;
&lt;p&gt;For packages supporting sensory studies, see the &lt;a href=&#34;https://cran.r-project.org/web/views/Psychometrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Psychometrics CRAN task view&lt;/a&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=NutrienTrackeR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NutrienTrackeR&lt;/a&gt; provides convenience functions for calculating nutrient content (macronutrients and micronutrients) of foods using food composition data from several reference databases, including: &amp;lsquo;USDA&amp;rsquo; (United States), &amp;lsquo;CIQUAL&amp;rsquo; (France), &amp;lsquo;BEDCA&amp;rsquo; (Spain) and &amp;lsquo;CNF&amp;rsquo; (Canada).&lt;/p&gt;
&lt;h3 id=&#34;plant-pathology&#34;&gt;Plant pathology&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=epifitter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;epifitter&lt;/a&gt; provides functions for analysis and visualization of plant disease progress curve data. &lt;a href=&#34;https://CRAN.R-project.org/package=epiphy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;epiphy&lt;/a&gt; is a toolbox for analyzing plant disease epidemics. It provides a common framework for plant disease intensity data recorded over time and/or space. &lt;a href=&#34;https://CRAN.R-project.org/package=hagis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hagis&lt;/a&gt; provides functions for analysis of plant pathogen pathotype survey data. Functions provided calculate distribution of susceptibilities, distribution of complexities with statistics, pathotype frequency distribution, as well as diversity indices for pathotypes. &lt;a href=&#34;https://cran.r-project.org/package=poppr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;poppr&lt;/a&gt; is for for genetic analysis of populations with mixed clonal/sexual reproductive strategies. Provides population genetic analysis tools for hierarchical analysis of partially clonal populations.&lt;/p&gt;
&lt;h3 id=&#34;rural-sociology&#34;&gt;Rural Sociology&lt;/h3&gt;
&lt;p&gt;See the CRAN task view for &lt;a href=&#34;https://cran.r-project.org/web/views/Psychometrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Psychometrics&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/views/SocialSciences.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SocialScience&lt;/a&gt;. Both the &lt;a href=&#34;https://cran.microsoft.com/snapshot/2022-03-27/web/views/Survival.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;lsquo;Survival&amp;rsquo; CRAN task view&lt;/a&gt; and the &lt;a href=&#34;https://github.com/OnofriAndreaPG/agriCensData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agriCensData&lt;/a&gt; package provide tools for working with interval and censored data.&lt;/p&gt;
&lt;h3 id=&#34;soil-science&#34;&gt;Soil Science&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=sharpshootR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sharpshootR&lt;/a&gt; contains a compendium of utility functions supporting soils survey work including data management, summary, visualizations and conversions.For soil pedology, &lt;a href=&#34;https://github.com/ncss-tech/aqp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aqp&lt;/a&gt; provides a general toolkit for soil scientists: specialized data structures, soil profile summary, visualization, color conversion, and more. Most USDA-NRCS soils related databases and APIs can be accessed with &lt;a href=&#34;https://github.com/ncss-tech/soilDB/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;soilDB&lt;/a&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=SoilTaxonomy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SoilTaxonomy&lt;/a&gt; provides functions for parsing soil taxonomic terms. The &lt;a href=&#34;https://CRAN.R-project.org/view=Spatial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Spatial&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;https://CRAN.R-project.org/view=SpatioTemporal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Spatio-Temporal&amp;rdquo;&lt;/a&gt; CRAN task views provide extensive resources in spatial statistics. &lt;a href=&#34;https://github.com/mbask/fertplan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fertplan&lt;/a&gt; provides fertilizer recommendations based on soil test results (note this packages is optimized for horticultural crop production in Italy).&lt;/p&gt;
&lt;h3 id=&#34;weed-science&#34;&gt;Weed Science&lt;/h3&gt;
&lt;p&gt;The package &lt;a href=&#34;https://CRAN.R-project.org/package=drc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drc&lt;/a&gt; offers versatile model fitting and after-fitting functions for dose-response curves. &lt;a href=&#34;https://CRAN.R-project.org/package=PROSPER&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PROSPER&lt;/a&gt; is a package for simulating weed population dynamics at the individual and population level under a range of conditions including herbicide resistance and herbicide pressure. For ecological studies and analytical applications, the &lt;a href=&#34;https://cran.r-project.org/web/views/Environmetrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN task view for Environmetrics&lt;/a&gt; provides a list of existing R resources in this topic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Help in R</title>
      <link>/post/help-in-r/</link>
      <pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate>
      <guid>/post/help-in-r/</guid>
      <description>&lt;h2 id=&#34;what-do-you-do-when-you-need-to-solve-a-problem-in-r&#34;&gt;What do you do when you need to solve a problem in R?&lt;/h2&gt;
&lt;p&gt;If you have been programming for any amount of time, you have learned that you are likely to encounter errors programming in R and resolving those coding errors can be challenging.&lt;/p&gt;
&lt;p&gt;For most everyone, goggling an error message is the first step. This is not a bad choice as it often leads you to people who have already encountered the error and solved it. But, it can also lead you to a labyrinth of different, possible conflicting, possibly incomprehensible solutions. Additionally, it is not always the most time efficient method to solve a coding problem.&lt;/p&gt;
&lt;h2 id=&#34;some-alternatives&#34;&gt;Some Alternatives&lt;/h2&gt;
&lt;h3 id=&#34;check-the-documentation&#34;&gt;Check the documentation!&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s an ancient proverb about the importance of reading documentation: &amp;ldquo;you can spend 2 hours searching the web in order to save 15 minutes of reading the documentation.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Package and function documentation can be very helpful. There are two main aspects of documentation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Function reference: this describes the arguments a function can take, the expected format for those arguments and information about the function object. It may also contain theoretical details that are needed to understand the argument options and examples. Documentation varies in quality greatly across R packages. It can occasionally be too bare bones to be useful, but often (especially in base R commands and tidyverse packages) the documentation is very detailed and helpful. Submission to CRAN requires that packages have a documentation file that lists all package function documentation in alphabetical order.&lt;/li&gt;
&lt;li&gt;Vignettes: these are tutorials accompanying how to use a package functions. These usually cover a subset of functions and include text explanations. They are basically long examples. Vignettes can be enormously helpful. They are not required for submission to CRAN, so they are not always available, especially for older legacy packages. You can find these on the package website (if it exists) or its CRAN link. Here are some vignettes from the package &lt;a href=&#34;https://CRAN.R-project.org/package=tidyr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;{tidyr}&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;how-do-we-find-documentation&#34;&gt;How do we find documentation?&lt;/h4&gt;
&lt;p&gt;You find function documentation via the R console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?par  # does an exact search on &amp;quot;par&amp;quot;
??plot  # does a fuzzy match on &amp;quot;plot&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open help files for those items.&lt;/p&gt;
&lt;p&gt;Sometimes, you will discover there are multiple options and possibly different help files associated with a function name (just run &lt;code&gt;methods(&#39;mean&#39;)&lt;/code&gt; or &lt;code&gt;methods(&#39;anova&#39;)&lt;/code&gt; to see what I mean).&lt;/p&gt;
&lt;p&gt;These are functions that act differently depending on the R object type they are called to interact with (e.g. &lt;code&gt;mean(some_dates)&lt;/code&gt; will behave differently than &lt;code&gt;mean(some_numbers)&lt;/code&gt;). Which leads to the next point: all R objects have a class assigned to them. You can check this with &lt;code&gt;class()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- rnorm(20); x &amp;lt;- y + rnorm(20) 
m &amp;lt;- lm(y ~ x)
class(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;lm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Understanding this difference between functions will help you understand which documentation files will help you solve your problem.&lt;/p&gt;
&lt;p&gt;More importantly, once you know the object class, you can search for methods that exist for that class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;methods(class = &amp;quot;lm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] add1           alias          anova          case.names     coerce        
##  [6] confint        cooks.distance deviance       dfbeta         dfbetas       
## [11] drop1          dummy.coef     effects        extractAIC     family        
## [16] formula        hatvalues      influence      initialize     kappa         
## [21] labels         logLik         model.frame    model.matrix   nobs          
## [26] plot           predict        print          proj           qr            
## [31] residuals      rstandard      rstudent       show           simulate      
## [36] slotsFromS3    summary        variable.names vcov          
## see &#39;?methods&#39; for accessing help and source code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this, we can see a special &lt;code&gt;plot()&lt;/code&gt; option exists (that provides several diagnostic plots), functions for extracting residuals (&lt;code&gt;rstudent()&lt;/code&gt;, &lt;code&gt;residuals()&lt;/code&gt;), a version of &lt;code&gt;anova()&lt;/code&gt; written for object type &amp;ldquo;lm&amp;rdquo;, and much much more.&lt;/p&gt;
&lt;h3 id=&#34;read-your-error-messages&#34;&gt;Read your error messages&lt;/h3&gt;
&lt;p&gt;Error messages can be obtuse and confusing (especially if you are new to programming). We have all have experienced (and will experience again) this error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;r_function_error.jpg&#34; alt=&#34;confused man meme at R error&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is telling us we are trying to subset (extract) information from a &amp;lsquo;closure&amp;rsquo; (which is a function). In essence, there was an attempt to do something like &lt;code&gt;mean$myvar&lt;/code&gt; when &lt;code&gt;mean()&lt;/code&gt; is a function, not a data.frame.&lt;/p&gt;
&lt;p&gt;However, error messages can also be trying to tell you something important. Here&amp;rsquo;s a recent experience of mine:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_ignored_error.png&#34; width=&#34;80%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Over time, these messages will become comprehensible. It&amp;rsquo;s still the same messages, but your R knowledge will help you understand them. But, becoming fluent in R error messages implies &lt;em&gt;reading them and trying to understand them&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;specific-places-to-ask-for-help&#34;&gt;Specific places to ask for help&lt;/h3&gt;
&lt;p&gt;Eventually, you may need to search forums or ask for help from kind strangers. If Google fails you, here are some other useful resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://community.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Community&lt;/a&gt;, a helpful forum that is only for R questions. It is run by RStudio and moderated (to an extent). This is one of the more useful sites to search or post on.
&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;rstudio_community.png&#34; alt=&#34;rstudio community screenshot&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rfordatasci.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R4DS community&lt;/a&gt;, a friendly, welcoming community. Join their slack channel and ask a question.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;r4ds_screenshot.png&#34; alt=&#34;R for DS community screenshot&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack overflow&lt;/a&gt;, the long-established site of all questions programming. Can often be helpful.
&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;stackoverflow_screenshot.png&#34; alt=&#34;stack overflow screen shot&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consider-reading-the-source-code&#34;&gt;Consider reading the source code&lt;/h3&gt;
&lt;p&gt;This is best for advanced users, but it can hep you resolve very specific questions about a function. Reading source code will also help improve your own coding.&lt;/p&gt;
&lt;p&gt;** How to find source code: **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type the function name in the console without parentheses:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean.default
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, trim = 0, na.rm = FALSE, ...) 
## {
##     if (!is.numeric(x) &amp;amp;&amp;amp; !is.complex(x) &amp;amp;&amp;amp; !is.logical(x)) {
##         warning(&amp;quot;argument is not numeric or logical: returning NA&amp;quot;)
##         return(NA_real_)
##     }
##     if (na.rm) 
##         x &amp;lt;- x[!is.na(x)]
##     if (!is.numeric(trim) || length(trim) != 1L) 
##         stop(&amp;quot;&#39;trim&#39; must be numeric of length one&amp;quot;)
##     n &amp;lt;- length(x)
##     if (trim &amp;gt; 0 &amp;amp;&amp;amp; n) {
##         if (is.complex(x)) 
##             stop(&amp;quot;trimmed means are not defined for complex data&amp;quot;)
##         if (anyNA(x)) 
##             return(NA_real_)
##         if (trim &amp;gt;= 0.5) 
##             return(stats::median(x, na.rm = FALSE))
##         lo &amp;lt;- floor(n * trim) + 1
##         hi &amp;lt;- n + 1 - lo
##         x &amp;lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
##     }
##     .Internal(mean(x))
## }
## &amp;lt;bytecode: 0x7fa5749f17f8&amp;gt;
## &amp;lt;environment: namespace:base&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes this is not informative&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (...)  .Primitive(&amp;quot;c&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;subset
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, ...) 
## UseMethod(&amp;quot;subset&amp;quot;)
## &amp;lt;bytecode: 0x7fa573afcb48&amp;gt;
## &amp;lt;environment: namespace:base&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;`[`
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .Primitive(&amp;quot;[&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Use {the package {lookup} to find what you need&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&amp;quot;jimhester/lookup&amp;quot;)
lookup::lookup(`[`)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{lookup} checks CRAN, Bioconductor and GitHub for source code! Prior to {lookup}, finding source code for R functions was &lt;a href=&#34;https://github.com/jennybc/access-r-source#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;challenging&lt;/a&gt;. Please note that this &amp;ldquo;lookup&amp;rdquo; is NOT the same same package called &amp;ldquo;lookup&amp;rdquo; found on CRAN. They have zero overlapping functionality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Write Custom Functions in R</title>
      <link>/post/writing-r-functions/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/writing-r-functions/</guid>
      <description>&lt;p&gt;You may find yourself needing to do something repeatedly in R. Sure, you can cut-and-paste and change that one thing, or two things, or five things, but this quickly becomes cumbersome. The result can be a very long R file and the likelihood of making a mistake that you don&amp;rsquo;t notice increases (e.g. forgetting to change a variable or an argument).&lt;/p&gt;
&lt;p&gt;There is the general rule of DRY: don&amp;rsquo;t repeat yourself. In practice, if something has to pasted more than twice, then consider writing a function to accomplish that aim instead.&lt;/p&gt;
&lt;h3 id=&#34;introduction-to-writing-functions&#34;&gt;Introduction to Writing Functions&lt;/h3&gt;
&lt;p&gt;R functions follow a general structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_function_name &amp;lt;- function(argument1, argument2) {
  final_output &amp;lt;- action(argument1, argument2)
  return(final_output)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A classic function example is conversion of temperature from Fahrenheit to celsius:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel &amp;lt;- function(fahr) {
  # function that converts temperature in degrees Fahrenheit to celsius
  # input: fahr: numeric value representing temp in degrees fahrenheit
  # output: kelvin: numeric converted temp in celsius
  celsius &amp;lt;- ((fahr - 32) * (5 / 9)) 
  return(celsius)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes a numeric value, temperature in Fahrenheit, and outputs another numeric value, that same value converted to celsius.&lt;/p&gt;
&lt;p&gt;Function usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel(80)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 26.66667
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function can be called for a large number of values at once:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a vector of 100 numbers randomly sampled between 1 and 100. 
x1 &amp;lt;- sample(1:100, 100, replace = TRUE)
x2 &amp;lt;- fahr_to_cel(x1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you provide the incorrect type of data, the function will not work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel(&amp;quot;thirty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in fahr - 32: non-numeric argument to binary operator
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-more-complex-example&#34;&gt;A More Complex Example&lt;/h3&gt;
&lt;p&gt;Often we want to do something more complicated. One thing I want to do frequently is build boxplots.&lt;/p&gt;
&lt;p&gt;First, simulate some data. This data set has two categorical variables, &lt;code&gt;cat1&lt;/code&gt; and &lt;code&gt;cat2&lt;/code&gt;, and 4 different continuous variables generated through data simulation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydata &amp;lt;- data.frame(cat1 = rep(c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;), 10),
                     cat2 = rep(c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;), each = 20),
                     var1 = rnorm(40),
                     var2 = runif(40), 
                     var3 = rlnorm(40),
                     var4 = rbeta(40, 1, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, write up an example of what you want to do. In this example, let&amp;rsquo;s create a boxplot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(var1 ~ cat1, data = mydata,
        main = NA, col = &amp;quot;orangered&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s put that in a function. Start with the basic function framework:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function() {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, insert the function code. Start by cut-and-pasting the original boxplot command ran above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function() {
    boxplot(var1 ~ cat1, data = mydata,
    main = NA, col = &amp;quot;orangered&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Decide on arguments you want to control and put that inside the &lt;code&gt;function()&lt;/code&gt; parentheses. Probably the independent and dependent variable (x and y, respectively), as well as the data frame needed.&lt;/p&gt;
&lt;p&gt;Put those arguments inside &lt;code&gt;function()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function(df, x, y) {
    boxplot(var1 ~ cat1, data = mydata,
    main = NA, col = &amp;quot;orangered&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then indicate where those arguments are used in the function. They must be used in the function (otherwise, why have them?).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function(df, x, y) {
    boxplot(y ~ x, data = df,
    main = NA, col = &amp;quot;orangered&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if you try to use this function, it won&amp;rsquo;t work. The argument &lt;code&gt;y ~ x&lt;/code&gt; is a special class of object in R called &amp;ldquo;formula&amp;rdquo; and the formatting and object type must match. Formulas are used widely in R for linear modelling and follow the exact same convention:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y ~ x  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note that the information on either side of &lt;code&gt;~&lt;/code&gt; can become more complicated. (but not in this function).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, create a formula object using the functions &lt;code&gt;formula()&lt;/code&gt; and &lt;code&gt;paste()&lt;/code&gt; within the function and insert that into the basic boxplot code. If you don&amp;rsquo;t know how to use those function, type &lt;code&gt;?formula&lt;/code&gt; and &lt;code&gt;?paste&lt;/code&gt; into the console to learn more about them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function(df, x, y) {
    f = formula(paste(y, &amp;quot;~&amp;quot;, x))
    boxplot(f, data = df,
    main = NA, col = &amp;quot;orangered&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you want the ability to change the color? Insert a new argument and replace it in the function body:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function(x, y, color) {
    f = formula(paste(y, &amp;quot;~&amp;quot;, x))
    boxplot(f, data = df,
    main = NA, col = color)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want the option to set the some options or if you choose not to, have the function choose values automatically as defaults, that can be done by naming the argument in &lt;code&gt;formula()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func = function(df = mydata, x, y, color = &amp;quot;springgreen&amp;quot;) {
    f = formula(paste(y, &amp;quot;~&amp;quot;, x))
    boxplot(f, data = df,
    main = NA, col = color)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next step is to run the function as it is currently written (highlight the function code and click run). Next, make sure you add this function (i.e. &lt;code&gt;boxplot_funct = function(...)&lt;/code&gt;) to your R environment by running it in the console. You can check it exists in your R global environment as thus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ls()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;boxplot_func&amp;quot; &amp;quot;fahr_to_cel&amp;quot;  &amp;quot;mydata&amp;quot;       &amp;quot;x1&amp;quot;           &amp;quot;x2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, call the function and make sure it does what we want?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func(mydata, &amp;quot;cat1&amp;quot;, &amp;quot;var1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func(x = &amp;quot;cat2&amp;quot;, y = &amp;quot;var1&amp;quot;, col = &amp;quot;darkcyan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot_func(mydata, &amp;quot;cat2&amp;quot;, &amp;quot;var4&amp;quot;, col = &amp;quot;khaki&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-15-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What if it doesn&amp;rsquo;t do what we want? What if you get strange output? No output? Or strange error messages? Herein comes the world of debugging (another blog post for another day).&lt;/p&gt;
&lt;h3 id=&#34;error-checking-and-error-messages&#34;&gt;Error Checking and Error Messages&lt;/h3&gt;
&lt;p&gt;You may have noticed earlier this strange error message:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel(&amp;quot;thirty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in fahr - 32: non-numeric argument to binary operator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a very confusing message. We most certainly provided a &amp;ldquo;non-numeric argument&amp;rdquo;, but what is a &amp;ldquo;binary operator&amp;rdquo;? Turns out that is a programming speak for a standard mathematical operations addition, subtraction, multiplication and division (called &amp;lsquo;binary&amp;rsquo; because they take two inputs). Still, we are likely to encounter more strange error messages written in programmer speak that confuse us or someone else using our functions. We can write custom error messages that are produced when certain errors occur.&lt;/p&gt;
&lt;p&gt;Here is the temperature conversion function again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fahr_to_cel &amp;lt;- function(fahr) {
  celsius &amp;lt;- ((fahr - 32) * (5 / 9)) 
  return(celsius)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since they can only take numeric argument, maybe we can start for checking for this? There are a few options in do this. One of the easiest to use is &lt;code&gt;stopifnot()&lt;/code&gt;. This functions takes the general form: &lt;code&gt;stopifnot(&amp;quot;my custom error message&amp;quot; = test)&lt;/code&gt;. What constitutes a &amp;lsquo;test&amp;rsquo; is an R expression that returns a TRUE or FALSE value after being evaluated. Examples of this are &lt;code&gt;is.character(x)&lt;/code&gt;, &lt;code&gt;is.NA(x)&lt;/code&gt;, &lt;code&gt;x &amp;gt; 0&lt;/code&gt; and so on. For each of these statements, the expectation is that R will true a TRUE or FALSE. If the test does not do this reliably (e.g. you may not be able to evaluate &lt;code&gt;x &amp;gt; 0&lt;/code&gt; if x is non-numeric), then a different test is needed.&lt;/p&gt;
&lt;p&gt;In our case, we can use &lt;code&gt;is.numeric()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel &amp;lt;- function(fahr) {
  stopifnot(&amp;quot;input is not numeric&amp;quot; = is.numeric(fahr))
  celsius &amp;lt;- ((fahr - 32) * (5 / 9)) 
  return(celsius)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s run some test cases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel(30)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1.111111
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fahr_to_cel(&amp;quot;thirty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in fahr_to_cel(&amp;quot;thirty&amp;quot;): input is not numeric
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, the first one worked and the second generated an error message.&lt;/p&gt;
&lt;p&gt;Naturally, this is a very trivial example, but if you write more complicated functions with the intent of them automatically accomplishing a goal for you, these error messages can be helpful.&lt;/p&gt;
&lt;h3 id=&#34;functions-and-tidy-evaluation&#34;&gt;Functions and Tidy Evaluation&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ve worked with the tidyverse, you know it handles input a bit differently. In summary, quotes are used far less often. This makes writing function quite challening at times and required the use of the double curly braces, &lt;code&gt;{{}}&lt;/code&gt; or the &amp;ldquo;bang-bang&amp;rdquo; operator &lt;code&gt;!!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What if we wanted to do a boxplot function using ggplot?&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the code would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)

mydata &amp;lt;- data.frame(cat = rep(c(&amp;quot;AA&amp;quot;, &amp;quot;BB&amp;quot;), each = 50), 
                     obs = c(rnorm(50), runif(50)))

ggplot(mydata, aes(x = cat, y = obs)) +
  geom_boxplot(aes(fill = cat), alpha = 0.5) +
  geom_jitter(height = 0, width = 0.2, alpha = 0.6, color = &amp;quot;black&amp;quot;) + 
  guides(fill = &amp;quot;none&amp;quot;) +
  theme_classic()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But, if you try to write a function following the usual rules, it won&amp;rsquo;t work properly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gboxplot_func &amp;lt;- function(x1, y1) {
  ggplot(mydata, aes(x = x1, y = y1)) +
  geom_boxplot(aes(fill = x1), alpha = 0.5) +
  geom_jitter(height = 0, width = 0.2, alpha = 0.6, color = &amp;quot;black&amp;quot;) + 
  guides(fill = &amp;quot;none&amp;quot;) +
  theme_classic()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;gboxplot_func(cat, obs)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in FUN(X[[i]], ...): object &#39;obs&#39; not found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This one works, but the results are crazy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gboxplot_func(&amp;quot;cat&amp;quot;, &amp;quot;obs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Why are the results wonky? Because while this function see &amp;ldquo;mydata&amp;rdquo; has 100 observations, it cannot connect &amp;ldquo;cat&amp;rdquo; and &amp;ldquo;obs&amp;rdquo; to the data frame.&lt;/p&gt;
&lt;p&gt;This is where the special operators come in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gboxplot_func2 &amp;lt;- function(x1, y1) {
  ggplot(mydata, aes(x = {{x1}}, y = {{y1}})) +
  geom_boxplot(aes(fill = {{x1}}), alpha = 0.5) +
  geom_jitter(height = 0, width = 0.2, alpha = 0.6, color = &amp;quot;black&amp;quot;) + 
  guides(fill = &amp;quot;none&amp;quot;) +
  theme_classic()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gboxplot_func2(cat, obs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/writing-r-functions/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The curly braces enable us to insert unquoted tidy variables and use ggplot.&lt;/p&gt;
&lt;p&gt;What if you have multiple options to specify in a single arguments? You can use the &lt;code&gt;...&lt;/code&gt; notation (in the final argument):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;var_sum_funct(storms, day, name)[1:5,] # one grouping factor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 × 3
##   name      Mean     SD
##   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 AL011993  8.75 13.7  
## 2 AL012000  7.75  0.5  
## 3 AL021992 25.6   0.548
## 4 AL021994 20.3   0.516
## 5 AL021999  2.75  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;var_sum_funct(storms, day, name, status)[1:5,] # many grouping factors
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;name&#39;. You can override using the `.groups` argument.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 × 4
## # Groups:   name [5]
##   name     status               Mean     SD
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 AL011993 tropical depression  8.75 13.7  
## 2 AL012000 tropical depression  7.75  0.5  
## 3 AL021992 tropical depression 25.6   0.548
## 4 AL021994 tropical depression 20.3   0.516
## 5 AL021999 tropical depression  2.75  0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;var_sum_funct(storms, day) # unusual example! 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 2
##    Mean    SD
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  15.9  9.01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a very brief introduction to tidy evaluation. More information on tidy evaluation is available for &lt;a href=&#34;https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot&lt;/a&gt; and &lt;a href=&#34;https://dplyr.tidyverse.org/articles/programming.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dplyr&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Applied ANOVA in R</title>
      <link>/post/anova-in-r/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/anova-in-r/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;p_values.png&#34; alt=&#34;xkcd commentary on p-values&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;ANOVA in R is a unfortunately a bit complicated. Unlike SAS, ANOVA functions in R lack a consistent structure, consistent output and the accessory packages for ANOVA display a patchwork of compatibility. The result is that it is easy to misspecify a model or make other mistakes. The information below is intended to serve as a guide through the R ANOVA wilderness.&lt;/p&gt;
&lt;h4 id=&#34;packages-needed&#34;&gt;Packages Needed&lt;/h4&gt;
&lt;p&gt;There are many packages to load. Here is a (very) brief summary of what each package does.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;Anova() function to extract type III &amp;amp; II sums of squares&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lme4&lt;/td&gt;
&lt;td&gt;mixed models&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nlme&lt;/td&gt;
&lt;td&gt;mixed models, non-linear models, alternative covariance structures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emmeans&lt;/td&gt;
&lt;td&gt;for extracting least squares means and contrasts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lmer test&lt;/td&gt;
&lt;td&gt;improved summary functions of lmer objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dplyr&lt;/td&gt;
&lt;td&gt;data organization&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forcats&lt;/td&gt;
&lt;td&gt;for managing categorical data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;agridat&lt;/td&gt;
&lt;td&gt;has many agricultural data sets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;agricolae&lt;/td&gt;
&lt;td&gt;has options for many common agricultural experimental designs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(car)
library(lme4)
library(nlme)
library(emmeans) #in older version of R, you may need to install &amp;quot;multcompView&amp;quot; separately to access full functionality of the emmeans package
library(lmerTest)
library(dplyr)
library(forcats)
library(agridat)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;formula-notation&#34;&gt;Formula Notation&lt;/h4&gt;
&lt;p&gt;There are some consistent features across ANOVA methods in R. Formula notation is often used in the R syntax for ANOVA functions. It looks like this: &lt;code&gt;$Y ~ X&lt;/code&gt;, where Y is the dependent variable (the response) and X is/are the independent variable(s) (e.g. the experimental treatments).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_formula &amp;lt;- formula(Y ~ treatment1 + treatment2)
class(my_formula)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;formula&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_formula
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Y ~ treatment1 + treatment2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Often the independent variables (i,e, the treatments or the x variables) are expected to be factors, another type of R object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_var &amp;lt;- c(rep(&amp;quot;low&amp;quot;,5), rep(&amp;quot;high&amp;quot;, 5))
class(my_var) #check what variable type it is
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although &amp;ldquo;my_var&amp;rdquo; is not type factor, it is type &amp;ldquo;character&amp;rdquo; which is automatically converted to a factor in &lt;code&gt;lm()&lt;/code&gt;, &lt;code&gt;lmer()&lt;/code&gt;, &lt;code&gt;lme()&lt;/code&gt; and many other linear modeling functions. There are some packages that do not follow this convention, so it&amp;rsquo;s helpful to read function documentation, especially if you get unexpected results.&lt;/p&gt;
&lt;p&gt;Variables like year, which are often imported as a number or integer, do need to be converted to a factor or a character variable prior to analysis. Otherwise, they will be interpreted as a number in linear modelling and treated as a covariate, e.g, 2020 would be 2,020. Here is one way to do this conversion:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_factor &amp;lt;- as.character(my_var) # convert to a character
class(my_factor) # check variable type to confirm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_factor &amp;lt;- as.factor(my_var) # convert to a factor
class(my_factor) # check variable type again to confirm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The choice of whether to convert a categorical variable to a character or factor depends on the comfort of the user with these structures and package requirements.&lt;/p&gt;
&lt;p&gt;Sometimes, there is a need to alter the order of treatment levels (that is, how R sees those levels). The default behavior of R is to order categorical levels alphanumerically.  However, sometimes there are reasons you may not want this (for example, you want to set a particular reference level as the first factor level).&lt;/p&gt;
&lt;p&gt;Below is one example of how to reorder factor levels in a variable. The first step is to see which levels are present in the variable and how they are ordered:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;levels(my_factor) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;high&amp;quot; &amp;quot;low&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that is known, you can use that information to manually set the levels and their order. Note that spelling of each level much match what is actually present in the variable. Unmatched levels in the variable will be set to NA automatically by R in the following step.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_factor &amp;lt;- factor(my_factor, levels = c(&amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;)) 
levels(my_factor) # check the new ordering
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;low&amp;quot;  &amp;quot;high&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Knowing the level order is important because in the implementation of ANOVA in R, the first level is treated as the reference level. Manipulating factors is a challenging task in R. The package &lt;a href=&#34;https://forcats.tidyverse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;forcats&lt;/a&gt; contains a collection of accessory functions for managing factors (&amp;ldquo;forcats&amp;rdquo; = for categories). The tutorial uses the forcats function &lt;code&gt;fct_drop()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;More on formulas:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The formula first shown, &lt;code&gt;Y ~ treatment1 + treatment2&lt;/code&gt;, includes main effects only. Other formula notation includes the symbols &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, indicating notation for interaction only and main effects plus the interaction term, respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;formula(Y ~ treatment1:treatment2) # interaction only
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Y ~ treatment1:treatment2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;formula(Y ~ treatment1*treatment2) # interaction plus main effects
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Y ~ treatment1 * treatment2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two formulas are equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;formula(Y ~ treatment1 + treatment2 + treatment1:treatment2) 
formula(Y ~ treatment1*treatment2) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps you can see from these examples that formulas are a really just a collections of characters (that is, a string) and exist independent of any data set. Later, we will need to link these formulas to a data set to actually construct a linear model and conduct statistical analysis.&lt;/p&gt;
&lt;h3 id=&#34;anova-for-fixed-effects-models&#34;&gt;ANOVA for fixed effects models&lt;/h3&gt;
&lt;p&gt;Here is a function for reporting the number of missing data in each column. There are other ways to do this, but I find this function easy enough to write and use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;count_na &amp;lt;- function(df) {
  apply(df, 2, function(x) sum(is.na(x))) 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;completely-randomised-design&#34;&gt;Completely Randomised design&lt;/h4&gt;
&lt;p&gt;First, load the data set &amp;ldquo;warpbreaks&amp;rdquo; (a data set from base R). This is an old data set with variables for wool type (A and B) and tension on the loom (L, M or H). The response variable is &amp;ldquo;breaks&amp;rdquo;, the number of times the wool thread breaks on industrial looms.&lt;/p&gt;
&lt;p&gt;I always like to have a quick look at the data before running any statistical tests. So, here we go:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(warpbreaks)
count_na(warpbreaks)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  breaks    wool tension 
##       0       0       0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(warpbreaks)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	54 obs. of  3 variables:
##  $ breaks : num  26 30 54 25 70 52 51 26 67 18 ...
##  $ wool   : Factor w/ 2 levels &amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ tension: Factor w/ 3 levels &amp;quot;L&amp;quot;,&amp;quot;M&amp;quot;,&amp;quot;H&amp;quot;: 1 1 1 1 1 1 1 1 1 2 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;warpbreaks$wool &amp;lt;- factor(warpbreaks$wool, levels = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))

table(warpbreaks$wool, warpbreaks$tension)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    
##     L M H
##   A 9 9 9
##   B 9 9 9
##   C 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(warpbreaks$breaks, col = &amp;quot;gold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(breaks ~ wool, data = warpbreaks, col = &amp;quot;orangered&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(breaks ~ tension, data = warpbreaks, col = &amp;quot;chartreuse&amp;quot;) #why not have colorful plots?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-9-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This data set has 2 treatments. We don&amp;rsquo;t know if there is an interaction between the variables, yet. A good start is to run a linear model using &lt;code&gt;lm()&lt;/code&gt; function, the linear regression function. As a reminder, ANOVA is a special case of the linear regression model where the predictors (the experimental treatments) are categories rather than a continuous variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# run standard linear model for main effects only
lm.mod1 &amp;lt;- lm(breaks ~ wool + tension, data = warpbreaks)

# extract type III sums of squares from that model
Anova(lm.mod1, type = &amp;quot;3&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Anova Table (Type III tests)
## 
## Response: breaks
##              Sum Sq Df  F value    Pr(&amp;gt;F)    
## (Intercept) 20827.0  1 154.3226 &amp;lt; 2.2e-16 ***
## wool          450.7  1   3.3393  0.073614 .  
## tension      2034.3  2   7.5367  0.001378 ** 
## Residuals    6747.9 50                       
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# run a linear model with main effects and interactions
lm.mod2 &amp;lt;- lm(breaks ~ wool*tension, data = warpbreaks)

# ...and type III sums of squares 
Anova(lm.mod2, type = &amp;quot;III&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Anova Table (Type III tests)
## 
## Response: breaks
##               Sum Sq Df  F value    Pr(&amp;gt;F)    
## (Intercept)  17866.8  1 149.2757 2.426e-16 ***
## wool          1200.5  1  10.0301 0.0026768 ** 
## tension       2468.5  2  10.3121 0.0001881 ***
## wool:tension  1002.8  2   4.1891 0.0210442 *  
## Residuals     5745.1 48                       
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;FYI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;functions only shown as an example and not actually run.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this function runs type II sums of squares: 
Anova(lm.mod2, type = &amp;quot;II&amp;quot;)
# this function runs type I sums of squares: 
anova(lm.mod2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&#34;color:mediumblue&#34;&gt; &lt;strong&gt;A few comments on types of sums of squares:&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As a reminder, the type of sums of squares used in statistical tests can impact the results and subsequent interpretation. Type I, sums of squares tests for statistical significance by adding one variable to the model at time (and hence is also called &amp;ldquo;sequential&amp;rdquo;). If there is any unbalance in the treatments, the type I sums of squares are dependent on the order variables are added to the model and hence is often not the best choice for many agricultural experiment. Type III sums of squares (also called &amp;ldquo;partial&amp;rdquo; or &amp;ldquo;marginal&amp;rdquo;) evaluates the statistical significance of variable or interaction, assuming that the other variables are in the model. This is a decent default option. The last option is Type II sums of squares, which is the best option when &lt;em&gt;you are sure there are no interactions between variables&lt;/em&gt;. If there is complete balance among treatments (each treatment is observed the same number of times with no missing data), then there is no need to concern yourself with these different types of sums of squares.&lt;/p&gt;
&lt;h4 id=&#34;compare-models&#34;&gt;Compare Models&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# conduct an F test comparing the models
anova(lm.mod1, lm.mod2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Analysis of Variance Table
## 
## Model 1: breaks ~ wool + tension
## Model 2: breaks ~ wool * tension
##   Res.Df    RSS Df Sum of Sq      F  Pr(&amp;gt;F)  
## 1     50 6747.9                              
## 2     48 5745.1  2    1002.8 4.1891 0.02104 *
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# also, consider doing a stepwise approach for finding the best model:
step(lm.mod2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Start:  AIC=264.02
## breaks ~ wool * tension
## 
##                Df Sum of Sq    RSS    AIC
## &amp;lt;none&amp;gt;                      5745.1 264.02
## - wool:tension  2    1002.8 6747.9 268.71
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = breaks ~ wool * tension, data = warpbreaks)
## 
## Coefficients:
##    (Intercept)           woolB        tensionM        tensionH  woolB:tensionM  
##          44.56          -16.33          -20.56          -20.00           21.11  
## woolB:tensionH  
##          10.56
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;model-diagnostics&#34;&gt;Model diagnostics&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(lm.mod2) #this will produce 4 plots of residuals
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-12-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-12-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-12-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shapiro.test(resid(lm.mod2)) #standard shapiro-wilk test. 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## 	Shapiro-Wilk normality test
## 
## data:  resid(lm.mod2)
## W = 0.98686, p-value = 0.8162
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# this variable could be analyzed with a log-normal model instead
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;least-squares-means--contrasts&#34;&gt;Least squares means &amp;amp; contrasts&lt;/h4&gt;
&lt;p&gt;The emmeans package is a flexible package for extracting the estimated marginal means (in SAS, the &amp;ldquo;least squares means&amp;rdquo;) from different linear models. It is compatible with a large number of R linear modelling packages.&lt;/p&gt;
&lt;p&gt;Here is some code for extracting the marginal means and conducting contrasts.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# extract least squares means for &#39;tension&#39;
(lsm &amp;lt;- emmeans(lm.mod2, ~ tension))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  tension emmean   SE df lower.CL upper.CL
##  L         36.4 2.58 48     31.2     41.6
##  M         26.4 2.58 48     21.2     31.6
##  H         21.7 2.58 48     16.5     26.9
## 
## Results are averaged over the levels of: wool 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(lm.mod2, &amp;quot;wool&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  wool emmean   SE df lower.CL upper.CL
##  A      31.0 2.11 48     26.8     35.3
##  B      25.3 2.11 48     21.0     29.5
## 
## Results are averaged over the levels of: tension 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All pairwise comparisons within each level of tension:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;contrast(lsm, &amp;quot;pairwise&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  contrast estimate   SE df t.ratio p.value
##  L - M       10.00 3.65 48   2.742  0.0229
##  L - H       14.72 3.65 48   4.037  0.0006
##  M - H        4.72 3.65 48   1.295  0.4049
## 
## Results are averaged over the levels of: wool 
## P value adjustment: tukey method for comparing a family of 3 estimates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conduct custom contrasts comparing &amp;lsquo;Low&amp;rsquo; tension versus &amp;lsquo;Medium&amp;rsquo; and &amp;lsquo;High&amp;rsquo; and &amp;lsquo;High&amp;rsquo; versus &amp;lsquo;Medium&amp;rsquo; and &amp;lsquo;Low&amp;rsquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# see the order of each level in a factor
levels(warpbreaks$tension)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;L&amp;quot; &amp;quot;M&amp;quot; &amp;quot;H&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# construct a list of constructs 
# each item must be same length as the the number of levels present in the variable tension
# use numbers and fracions to indicate the contrasting levels
# the numbers must sum to zero 
cList &amp;lt;- list(LvMH = c(1, -0.5, -0.5), # low vs high + medium
              HvLM = c(0.5, 0.5, -1))  # high vs low + medium

# check that each contrast sums to zero
lapply(cList, sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $LvMH
## [1] 0
## 
## $HvLM
## [1] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# perform custom contrast and include a Bonferroni adjustment
summary(contrast(lsm, cList, adjust = &amp;quot;bonferroni&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  contrast estimate   SE df t.ratio p.value
##  LvMH        12.36 3.16 48   3.914  0.0006
##  HvLM         9.72 3.16 48   3.078  0.0069
## 
## Results are averaged over the levels of: wool 
## P value adjustment: bonferroni method for 2 tests
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;randomised-complete-block-design-rcbd---fixed-effects-model&#34;&gt;Randomised Complete Block Design (RCBD) - fixed effects model&lt;/h4&gt;
&lt;p&gt;This example uses rapeseed yield data from multiple locations, years and cultivars. Within a single location or year, the replication is often balanced.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Load Data and examine:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(shafii.rapeseed) # from the &#39;agridat&#39; package

rapeseed1987 &amp;lt;- shafii.rapeseed %&amp;gt;% filter(year == 87) %&amp;gt;% 
  mutate(block = fct_drop(rep), Cv = fct_drop(gen), loc = fct_drop(loc))

str(rapeseed1987)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	216 obs. of  7 variables:
##  $ year : int  87 87 87 87 87 87 87 87 87 87 ...
##  $ loc  : Factor w/ 9 levels &amp;quot;GGA&amp;quot;,&amp;quot;ID&amp;quot;,&amp;quot;MT&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ rep  : Factor w/ 4 levels &amp;quot;R1&amp;quot;,&amp;quot;R2&amp;quot;,&amp;quot;R3&amp;quot;,..: 1 2 3 4 1 2 3 4 1 2 ...
##  $ gen  : Factor w/ 6 levels &amp;quot;Bienvenu&amp;quot;,&amp;quot;Bridger&amp;quot;,..: 1 1 1 1 2 2 2 2 3 3 ...
##  $ yield: num  961 1329 1781 1698 1605 ...
##  $ block: Factor w/ 4 levels &amp;quot;R1&amp;quot;,&amp;quot;R2&amp;quot;,&amp;quot;R3&amp;quot;,..: 1 2 3 4 1 2 3 4 1 2 ...
##  $ Cv   : Factor w/ 6 levels &amp;quot;Bienvenu&amp;quot;,&amp;quot;Bridger&amp;quot;,..: 1 1 1 1 2 2 2 2 3 3 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;count_na(rapeseed1987)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  year   loc   rep   gen yield block    Cv 
##     0     0     0     0     0     0     0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(rapeseed1987$Cv, rapeseed1987$loc) #experiment has 1 rep per block 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
##            GGA ID MT NC OR SC TGA TX WA
##   Bienvenu   4  4  4  4  4  4   4  4  4
##   Bridger    4  4  4  4  4  4   4  4  4
##   Cascade    4  4  4  4  4  4   4  4  4
##   Dwarf      4  4  4  4  4  4   4  4  4
##   Glacier    4  4  4  4  4  4   4  4  4
##   Jet        4  4  4  4  4  4   4  4  4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(rapeseed1987$yield, col = &amp;quot;gold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ Cv, data = rapeseed1987, col = &amp;quot;orangered&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-16-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ loc, data = rapeseed1987, col = &amp;quot;chartreuse&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-16-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analyse experiment:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# for this example, the analysis will only be done for a single year
# block is nested within location
# if each block had a unique name, &#39;Error(block)&#39; would suffce
shaf.aov &amp;lt;- aov(yield ~ Cv*loc + Error(block), data = rapeseed1987)

summary(shaf.aov)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Error: block
##           Df Sum Sq Mean Sq F value Pr(&amp;gt;F)
## Residuals  3 336565  112188               
## 
## Error: Within
##            Df    Sum Sq  Mean Sq F value   Pr(&amp;gt;F)    
## Cv          5   3203992   640798   2.645 0.025111 *  
## loc         8 318197192 39774649 164.165  &amp;lt; 2e-16 ***
## Cv:loc     40  22707425   567686   2.343 0.000103 ***
## Residuals 159  38523267   242285                     
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(shaf.aov, ~ Cv | loc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Note: re-fitting model with sum-to-zero contrasts
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## loc = GGA:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   1442 245 161      959     1926
##  Bridger    1363 245 161      880     1847
##  Cascade    1505 245 161     1021     1988
##  Dwarf      1295 245 161      811     1779
##  Glacier    1681 245 161     1197     2164
##  Jet        1091 245 161      607     1575
## 
## loc = ID:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   1242 245 161      759     1726
##  Bridger     947 245 161      463     1430
##  Cascade     773 245 161      290     1257
##  Dwarf       932 245 161      448     1415
##  Glacier    1111 245 161      627     1595
##  Jet        1064 245 161      580     1548
## 
## loc = MT:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   2616 245 161     2132     3100
##  Bridger    2828 245 161     2345     3312
##  Cascade    2916 245 161     2433     3400
##  Dwarf      3452 245 161     2968     3935
##  Glacier    3307 245 161     2823     3790
##  Jet        3660 245 161     3177     4144
## 
## loc = NC:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   1001 245 161      517     1485
##  Bridger    1064 245 161      581     1548
##  Cascade     745 245 161      262     1229
##  Dwarf      1014 245 161      530     1497
##  Glacier    1229 245 161      746     1713
##  Jet        1674 245 161     1190     2157
## 
## loc = OR:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   4556 245 161     4072     5039
##  Bridger    2530 245 161     2046     3013
##  Cascade    3336 245 161     2852     3819
##  Dwarf      3932 245 161     3448     4415
##  Glacier    4185 245 161     3702     4669
##  Jet        3220 245 161     2736     3703
## 
## loc = SC:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   2500 245 161     2016     2983
##  Bridger    2705 245 161     2221     3189
##  Cascade    2119 245 161     1635     2602
##  Dwarf      1894 245 161     1410     2377
##  Glacier    2717 245 161     2234     3201
##  Jet        2833 245 161     2349     3316
## 
## loc = TGA:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   1258 245 161      774     1741
##  Bridger    1868 245 161     1384     2351
##  Cascade    1708 245 161     1224     2191
##  Dwarf       873 245 161      389     1356
##  Glacier    1453 245 161      970     1937
##  Jet         954 245 161      470     1438
## 
## loc = TX:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu    838 245 161      354     1322
##  Bridger    1069 245 161      585     1553
##  Cascade     735 245 161      251     1218
##  Dwarf       988 245 161      505     1472
##  Glacier     952 245 161      468     1435
##  Jet        1408 245 161      925     1892
## 
## loc = WA:
##  Cv       emmean  SE  df lower.CL upper.CL
##  Bienvenu   4375 245 161     3891     4859
##  Bridger    4604 245 161     4120     5087
##  Cascade    4464 245 161     3981     4948
##  Dwarf      3974 245 161     3490     4458
##  Glacier    4740 245 161     4256     5224
##  Jet        4344 245 161     3861     4828
## 
## Warning: EMMs are biased unless design is perfectly balanced 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;anova-for-mixed-models&#34;&gt;ANOVA for mixed models&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(models with random and fixed effects)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Random effects are often those treatments levels drawn from a large population of possible treatment levels and there is interest in understanding the distribution and variance of that population. This in contrast to fixed effects, where the inferences are restricted to the treatment levels tested.&lt;/p&gt;
&lt;p&gt;Blocking factors and Year are often considered random factors because a researcher is not interested in particular years or a blocking factor. When there is unbalanced replication, the variance components should be estimated with maximum likelihood or REML, which implies use of the packages &amp;ldquo;lmer&amp;rdquo; and/or &amp;ldquo;nlme&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;randomised-complete-block-design-rcbd---mixed-effects&#34;&gt;Randomised Complete Block Design (RCBD) - mixed effects&lt;/h4&gt;
&lt;p&gt;The &amp;ldquo;shafii.rapeseed&amp;rdquo; data set will be used for this section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analyse experiment using a mixed model:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This uses the function &lt;code&gt;lme()&lt;/code&gt; from the package &amp;ldquo;nlme&amp;rdquo;. Functionally, it is very similar to calling &lt;code&gt;lme4::lmer()&lt;/code&gt;. The degrees of freedom are different (&lt;code&gt;lmer()&lt;/code&gt; is using Satterthwaite&amp;rsquo;s approximation), but the p-values are the same.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# turn year into the factor &amp;quot;Year&amp;quot;
shafii.rapeseed$Year &amp;lt;- as.factor(shafii.rapeseed$year)
# create a blocking variable that is unique for each location-by-year combination
# so R doesn&#39;t conflate &amp;quot;R1&amp;quot; from one location/year with another location/year
shafii.rapeseed$Rep &amp;lt;- as.factor(paste(shafii.rapeseed$loc, shafii.rapeseed$year, shafii.rapeseed$rep, sep = &amp;quot;_&amp;quot;))

shaf.lme &amp;lt;- lme(fixed = yield ~ gen*loc + Year,
                  random = ~ 1|Rep,
                  data = shafii.rapeseed, method = &amp;quot;REML&amp;quot;)

# view sum of squares table 
# when anova() is called for an lme object, the function called is actually anova.lme()
anova(shaf.lme, type = &amp;quot;marginal&amp;quot;) # &amp;quot;marginal&amp;quot; is equivalent to type III sums of squares
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             numDF denDF   F-value p-value
## (Intercept)     1   470 16.204597  0.0001
## gen             5   470  1.092341  0.3637
## loc            13    92 13.074492  &amp;lt;.0001
## Year            2    92  2.035054  0.1365
## gen:loc        65   470  2.575753  &amp;lt;.0001
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Anova(shaf.lme, type = &amp;quot;3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Analysis of Deviance Table (Type III tests)
## 
## Response: yield
##                Chisq Df Pr(&amp;gt;Chisq)    
## (Intercept)  16.2046  1  5.686e-05 ***
## gen           5.4617  5     0.3622    
## loc         169.9684 13  &amp;lt; 2.2e-16 ***
## Year          4.0701  2     0.1307    
## gen:loc     167.4239 65  5.579e-11 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# FYI: use &amp;quot;anova(model.lme)&amp;quot; for type I sums of squares

# lmer notation
shaf.lmer &amp;lt;- lmer(yield ~ gen*loc + Year + (1|Rep),
                  data = shafii.rapeseed, REML = T)
anova(shaf.lmer, type = &amp;quot;marginal&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Marginal Analysis of Variance Table with Satterthwaite&#39;s method
##           Sum Sq Mean Sq NumDF  DenDF F value    Pr(&amp;gt;F)    
## gen      1860586  372117     5 470.00  1.0923    0.3637    
## loc     57901484 4453960    13 159.37 13.0745 &amp;lt; 2.2e-16 ***
## Year     1386524  693262     2  92.00  2.0351    0.1365    
## gen:loc 57034691  877457    65 470.00  2.5758 5.499e-09 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Anova(shaf.lmer, type = &amp;quot;3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Analysis of Deviance Table (Type III Wald chisquare tests)
## 
## Response: yield
##                Chisq Df Pr(&amp;gt;Chisq)    
## (Intercept)  16.2046  1  5.686e-05 ***
## gen           5.4617  5     0.3622    
## loc         169.9684 13  &amp;lt; 2.2e-16 ***
## Year          4.0701  2     0.1307    
## gen:loc     167.4239 65  5.579e-11 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;diagnostics-model-building&#34;&gt;Diagnostics, model building&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(shaf.lme)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;qqnorm(shaf.lme, abline = c(0, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-19-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;least-squares-means&#34;&gt;Least squares means&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# for cultivar 
(lme.means.cv &amp;lt;- emmeans(shaf.lme, &amp;quot;gen&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  gen      emmean  SE df lower.CL upper.CL
##  Bienvenu   2432 112 92     2211     2654
##  Bridger    2314 112 92     2092     2536
##  Cascade    2184 112 92     1962     2406
##  Dwarf      2308 112 92     2087     2530
##  Glacier    2463 112 92     2242     2685
##  Jet        2304 112 92     2082     2525
## 
## Results are averaged over the levels of: loc, Year 
## Degrees-of-freedom method: containment 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# for location
(lme.means.loc &amp;lt;- emmeans(shaf.lme, &amp;quot;loc&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  loc emmean  SE df lower.CL upper.CL
##  GGA   1682 329 92     1030     2335
##  ID    4217 261 92     3698     4736
##  KS    1120 476 92      174     2066
##  MS    2204 476 92     1258     3150
##  MT    3339 474 92     2398     4280
##  NC    1328 329 92      676     1981
##  NY    3139 476 92     2193     4085
##  OR    3292 329 92     2640     3945
##  SC    1819 261 92     1300     2338
##  TGA   1028 261 92      509     1547
##  TN    2543 476 92     1597     3490
##  TX     827 329 92      174     1479
##  VA    2282 328 92     1631     2932
##  WA    3861 261 92     3342     4380
## 
## Results are averaged over the levels of: gen, Year 
## Degrees-of-freedom method: containment 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# for cultivar means within each location
lme.means.int &amp;lt;- emmeans(shaf.lme, ~ gen | loc + Year)

# this code would produce location means within each cultivar 
# emmeans(model.lme, ~ loc | gen))
# also: 
# emmeans(model.lme, ~ loc | gen)) provides the same estimates as &#39;emmeans(model.lme, ~ gen | loc))&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pairwise-contrasts&#34;&gt;Pairwise Contrasts:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# all pairwise
pairs(lme.means.cv)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  contrast           estimate   SE  df t.ratio p.value
##  Bienvenu - Bridger   118.57 87.6 470   1.353  0.7548
##  Bienvenu - Cascade   248.34 87.6 470   2.834  0.0539
##  Bienvenu - Dwarf     124.11 87.6 470   1.417  0.7170
##  Bienvenu - Glacier   -31.00 87.6 470  -0.354  0.9993
##  Bienvenu - Jet       128.70 87.6 470   1.469  0.6843
##  Bridger - Cascade    129.77 87.6 470   1.481  0.6765
##  Bridger - Dwarf        5.54 87.6 470   0.063  1.0000
##  Bridger - Glacier   -149.57 87.6 470  -1.707  0.5277
##  Bridger - Jet         10.13 87.6 470   0.116  1.0000
##  Cascade - Dwarf     -124.23 87.6 470  -1.418  0.7161
##  Cascade - Glacier   -279.34 87.6 470  -3.188  0.0190
##  Cascade - Jet       -119.64 87.6 470  -1.366  0.7477
##  Dwarf - Glacier     -155.10 87.6 470  -1.770  0.4861
##  Dwarf - Jet            4.59 87.6 470   0.052  1.0000
##  Glacier - Jet        159.70 87.6 470   1.823  0.4521
## 
## Results are averaged over the levels of: loc, Year 
## Degrees-of-freedom method: containment 
## P value adjustment: tukey method for comparing a family of 6 estimates
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# plot results
plot(lme.means.cv, comparison = T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(lme.means.loc, comparison = T, horizontal = F) # rotate plots to vertical position
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Comparison discrepancy in group &amp;quot;1&amp;quot;, GGA - OR:
##     Target overlap = 0.0083, overlap on graph = -0.0111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-22-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# blue bars = lsmeans confidence 95% confidence intervals
# red arrows. pairwise differences (overlapping arrows = not significantly different)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For those who want the letters assigned to treatments based on all pairwise comparisons, it&amp;rsquo;s an unwieldy road:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(multcomp) # this will need to be installed if you do not already have it
tukey &amp;lt;- glht(shaf.lme, linfct = mcp(loc = &amp;quot;Tukey&amp;quot;))
### extract information
cld_tukey &amp;lt;- cld(tukey)
print(cld_tukey)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  GGA   ID   KS   MS   MT   NC   NY   OR   SC  TGA   TN   TX   VA   WA 
##  &amp;quot;a&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;a&amp;quot; &amp;quot;ac&amp;quot; &amp;quot;ab&amp;quot;  &amp;quot;a&amp;quot; &amp;quot;ab&amp;quot; &amp;quot;bc&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot; &amp;quot;ab&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot; &amp;quot;bc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Interaction plots can also be done:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(but, it gets unwieldy)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(lme.means.int, comparison = T, adjust = &amp;quot;tukey&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;other-pre-set-contrasts&#34;&gt;Other pre-set contrasts&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# compare to a control, e.g. &amp;quot;Bridger&amp;quot;
levels(shafii.rapeseed$gen)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Bienvenu&amp;quot; &amp;quot;Bridger&amp;quot;  &amp;quot;Cascade&amp;quot;  &amp;quot;Dwarf&amp;quot;    &amp;quot;Glacier&amp;quot;  &amp;quot;Jet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Bridger is listed in position 2 of the factor &#39;shafii.rapeseed$gen&#39;
# so &#39;2&#39; is set as the reference level in the following contrast statement: 

# &amp;quot;trt.vs.ctrlk&amp;quot; (treatment versus control treatment k) is a specific option to compare all treatment levels to a user-defined level
# by default, it will use the last level as the reference level

contrast(lme.means.cv, &amp;quot;trt.vs.ctrlk&amp;quot;, ref = 2) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  contrast           estimate   SE  df t.ratio p.value
##  Bienvenu - Bridger   118.57 87.6 470   1.353  0.5118
##  Cascade - Bridger   -129.77 87.6 470  -1.481  0.4315
##  Dwarf - Bridger       -5.54 87.6 470  -0.063  0.9998
##  Glacier - Bridger    149.57 87.6 470   1.707  0.3034
##  Jet - Bridger        -10.13 87.6 470  -0.116  0.9990
## 
## Results are averaged over the levels of: loc, Year 
## Degrees-of-freedom method: containment 
## P value adjustment: dunnettx method for 5 tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Search &lt;code&gt;?contrast.emmGrid&lt;/code&gt; to see full list of options for preset contrasts.&lt;/p&gt;
&lt;h4 id=&#34;custom-contrasts&#34;&gt;Custom contrasts&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example: contrast Western locations versus Southern locations

# first, find out what levels are present
unique(shafii.rapeseed$loc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] GGA ID  KS  MS  MT  NC  NY  OR  SC  TGA TN  TX  VA  WA 
## Levels: GGA ID KS MS MT NC NY OR SC TGA TN TX VA WA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# next create a contrast list 
# this is a list of coefficients as long your list of treatment levels
# indicating what coefficients to give each treatment level

# in this example, levels &amp;quot;ID&amp;quot;, &amp;quot;MT&amp;quot;, &amp;quot;OR&amp;quot;, and &amp;quot;WA&amp;quot; are contrasted versus
# &amp;quot;NC&amp;quot;, &amp;quot;SC&amp;quot;, &amp;quot;MS&amp;quot;, &amp;quot;TN&amp;quot;, &amp;quot;TX&amp;quot; and &amp;quot;VA&amp;quot;

cList &amp;lt;- list(West_V_South = c(0, 1/4, 0, -1/6, 1/4, -1/6, 0, 1/4, -1/6, 0, -1/6, -1/6, -1/6, 1/4))

# check that each contrast sums to zero:
lapply(cList, sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $West_V_South
## [1] 5.551115e-17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lme.means.loc2 &amp;lt;- emmeans(shaf.lme, &amp;quot;loc&amp;quot;, contr = cList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(lme.means.loc2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $emmeans
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1682 329 92     1030     2335
##  ID    4217 261 92     3698     4736
##  KS    1120 476 92      174     2066
##  MS    2204 476 92     1258     3150
##  MT    3339 474 92     2398     4280
##  NC    1328 329 92      676     1981
##  NY    3139 476 92     2193     4085
##  OR    3292 329 92     2640     3945
##  SC    1819 261 92     1300     2338
##  TGA   1028 261 92      509     1547
##  TN    2543 476 92     1597     3490
##  TX     827 329 92      174     1479
##  VA    2282 328 92     1631     2932
##  WA    3861 261 92     3342     4380
## 
## Results are averaged over the levels of: gen, Year 
## Degrees-of-freedom method: containment 
## Confidence level used: 0.95 
## 
## $contrasts
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1843 233 92   7.910  &amp;lt;.0001
## 
## Results are averaged over the levels of: gen, Year 
## Degrees-of-freedom method: containment
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# same contrast can also be done within each level of &#39;gen&#39;:
emmeans(shaf.lme, ~ loc | gen, contr = cList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $emmeans
## gen = Bienvenu:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1785 379 92  1032.31     2537
##  ID    4742 303 92  4140.13     5345
##  KS    1179 546 92    94.60     2263
##  MS    2455 546 92  1371.47     3539
##  MT    2825 544 92  1745.38     3904
##  NC    1330 379 92   577.36     2082
##  NY    2934 546 92  1849.69     4018
##  OR    4118 379 92  3365.98     4870
##  SC    1844 303 92  1241.42     2446
##  TGA    893 303 92   290.99     1496
##  TN    2965 546 92  1880.59     4049
##  TX     919 379 92   167.04     1671
##  VA    2124 378 92  1373.34     2875
##  WA    3943 303 92  3340.44     4545
## 
## gen = Bridger:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1470 379 92   718.17     2223
##  ID    3591 303 92  2989.15     4194
##  KS    1091 546 92     7.35     2175
##  MS    2478 546 92  1393.89     3562
##  MT    3037 544 92  1957.63     4117
##  NC    1479 379 92   727.28     2232
##  NY    3130 546 92  2045.60     4214
##  OR    2564 379 92  1811.99     3316
##  SC    2282 303 92  1679.58     2884
##  TGA   1603 303 92  1000.66     2205
##  TN    2485 546 92  1401.33     3569
##  TX     851 379 92    99.08     1604
##  VA    2397 378 92  1646.76     3148
##  WA    3935 303 92  3332.27     4537
## 
## gen = Cascade:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1758 379 92  1006.25     2511
##  ID    4081 303 92  3479.04     4684
##  KS     891 546 92  -193.40     1975
##  MS    1598 546 92   514.04     2682
##  MT    3125 544 92  2045.63     4205
##  NC    1062 379 92   309.61     1814
##  NY    2586 546 92  1502.21     3670
##  OR    2806 379 92  2053.82     3558
##  SC    1982 303 92  1379.70     2584
##  TGA   1492 303 92   889.83     2094
##  TN    2006 546 92   922.37     3090
##  TX     796 379 92    43.59     1548
##  VA    2191 378 92  1440.56     2942
##  WA    4203 303 92  3600.69     4805
## 
## gen = Dwarf:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1538 379 92   785.71     2290
##  ID    4326 303 92  3723.81     4928
##  KS    1208 546 92   123.85     2292
##  MS    1966 546 92   881.69     3050
##  MT    3661 544 92  2581.14     4740
##  NC    1321 379 92   568.53     2073
##  NY    3645 546 92  2561.26     4729
##  OR    3594 379 92  2841.40     4346
##  SC    1292 303 92   690.10     1895
##  TGA    451 303 92  -151.81     1053
##  TN    2688 546 92  1603.57     3771
##  TX     654 379 92   -98.64     1406
##  VA    2250 378 92  1499.12     3000
##  WA    3726 303 92  3123.52     4328
## 
## gen = Glacier:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   2031 379 92  1278.35     2783
##  ID    4299 303 92  3696.61     4901
##  KS    1268 546 92   183.85     2352
##  MS    2861 546 92  1776.82     3945
##  MT    3516 544 92  2436.14     4595
##  NC    1452 379 92   699.82     2204
##  NY    3301 546 92  2217.49     4385
##  OR    3472 379 92  2719.36     4224
##  SC    2025 303 92  1422.97     2628
##  TGA   1109 303 92   506.90     1712
##  TN    2265 546 92  1180.58     3348
##  TX     720 379 92   -31.85     1473
##  VA    2363 378 92  1612.64     3114
##  WA    3807 303 92  3205.02     4410
## 
## gen = Jet:
##  loc emmean  SE df lower.CL upper.CL
##  GGA   1511 379 92   758.95     2263
##  ID    4262 303 92  3659.68     4864
##  KS    1082 546 92    -2.40     2166
##  MS    1866 546 92   781.68     2950
##  MT    3869 544 92  2789.89     4949
##  NC    1326 379 92   573.58     2078
##  NY    3237 546 92  2152.80     4321
##  OR    3199 379 92  2446.70     3951
##  SC    1488 303 92   886.13     2091
##  TGA    622 303 92    19.27     1224
##  TN    2853 546 92  1768.63     3937
##  TX    1020 379 92   267.99     1772
##  VA    2364 378 92  1613.85     3115
##  WA    3554 303 92  2952.19     4157
## 
## Results are averaged over the levels of: Year 
## Degrees-of-freedom method: containment 
## Confidence level used: 0.95 
## 
## $contrasts
## gen = Bienvenu:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1968 267 92   7.359  &amp;lt;.0001
## 
## gen = Bridger:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1286 267 92   4.811  &amp;lt;.0001
## 
## gen = Cascade:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1948 267 92   7.286  &amp;lt;.0001
## 
## gen = Dwarf:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     2132 267 92   7.972  &amp;lt;.0001
## 
## gen = Glacier:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1826 267 92   6.828  &amp;lt;.0001
## 
## gen = Jet:
##  contrast     estimate  SE df t.ratio p.value
##  West_V_South     1902 267 92   7.112  &amp;lt;.0001
## 
## Results are averaged over the levels of: Year 
## Degrees-of-freedom method: containment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To perform custom contrasts on a another variable, a cList and emmeans call for that variable is required.&lt;/p&gt;
&lt;h3 id=&#34;ancova&#34;&gt;ANCOVA&lt;/h3&gt;
&lt;p&gt;(analysis of covariance)
From a R programming perspective, this is no different than running a standard linear model. A data set from &lt;strong&gt;agridat&lt;/strong&gt;, &amp;ldquo;theobald.covariate&amp;rdquo; comparing corn silage yields across multiple years, locations and cultivars. The data set includes a covariate, &amp;ldquo;chu&amp;rdquo; (corn heat units, a bit like growing degree days).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Load data and examine:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(theobald.covariate)
str(theobald.covariate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	256 obs. of  5 variables:
##  $ year : int  1990 1990 1990 1990 1990 1991 1991 1991 1991 1991 ...
##  $ env  : Factor w/ 7 levels &amp;quot;E1&amp;quot;,&amp;quot;E2&amp;quot;,&amp;quot;E3&amp;quot;,..: 1 2 3 4 7 1 2 3 4 5 ...
##  $ gen  : Factor w/ 10 levels &amp;quot;G01&amp;quot;,&amp;quot;G02&amp;quot;,&amp;quot;G03&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ yield: num  6.27 5.57 8.45 7.35 6.5 6.71 5.59 8.36 7.25 8.09 ...
##  $ chu  : num  2.57 2.53 2.72 2.72 2.48 2.44 2.55 2.75 2.75 2.61 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;count_na(theobald.covariate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  year   env   gen yield   chu 
##     0     0     0     0     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Exploratory plots:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# distributions of continuous variables
hist(theobald.covariate$yield, col = &amp;quot;gold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(theobald.covariate$chu, col = &amp;quot;gray70&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# relationship between reponse variable and covariate:
with(theobald.covariate, plot(chu, yield))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(unique(theobald.covariate$chu))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# the usual boxplots: 
boxplot(yield ~ env, data = theobald.covariate, col = &amp;quot;orangered&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ year, data = theobald.covariate, col = &amp;quot;chartreuse&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ gen, data = theobald.covariate, col = &amp;quot;darkcyan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-28-6.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Check the extent of replication:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;theobald.covariate$Year &amp;lt;- as.factor(theobald.covariate$year)
replications(yield ~ Year + env + gen, data = theobald.covariate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Year
## Year
## 1990 1991 1992 1993 1994 
##   40   63   60   45   48 
## 
## $env
## env
## E1 E2 E3 E4 E5 E6 E7 
## 35 35 44 36 36 36 34 
## 
## $gen
## gen
## G01 G02 G03 G04 G05 G06 G07 G08 G09 G10 
##  29  29  29  29  22  29  23  18  24  24
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# with(theobald.covariate, table(gen, env, Year)) # lots of useful output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The treatments are not fully crossed, so a fully specified model of the form &lt;code&gt;yield ~  Year*env*gen*chu&lt;/code&gt; cannot be tested. The treatments and interactions were tested in reduced models and compared (not shown). The final &amp;ldquo;best&amp;rdquo; model is shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# the covariate, chu, is added in like any other effect. 
theobald.lm2 &amp;lt;- lm(yield ~  Year + env*chu, data = theobald.covariate)
Anova(theobald.lm2, type = &amp;quot;III&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Anova Table (Type III tests)
## 
## Response: yield
##              Sum Sq  Df F value    Pr(&amp;gt;F)    
## (Intercept)   4.309   1  6.8321  0.009524 ** 
## Year         76.589   4 30.3607 &amp;lt; 2.2e-16 ***
## env          13.473   6  3.5607  0.002138 ** 
## chu          11.831   1 18.7596 2.187e-05 ***
## env:chu      13.376   6  3.5350  0.002268 ** 
## Residuals   150.096 238                      
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# how to extract the covariate slope(s): 
emtrends(theobald.lm2, ~ env, &amp;quot;chu&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  env chu.trend   SE  df lower.CL upper.CL
##  E1      7.015 1.62 238     3.82    10.21
##  E2      0.979 4.44 238    -7.76     9.72
##  E3      4.099 3.15 238    -2.11    10.31
##  E4     -2.884 3.54 238    -9.87     4.10
##  E5      8.222 2.70 238     2.90    13.54
##  E6      3.425 2.72 238    -1.93     8.78
##  E7     -0.359 2.55 238    -5.38     4.66
## 
## Results are averaged over the levels of: Year 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# emmeans extracted as usual:
emmeans(theobald.lm2, ~ env)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  env emmean    SE  df lower.CL upper.CL
##  E1    6.67 0.175 238     6.32     7.01
##  E2    5.13 0.256 238     4.63     5.64
##  E3    6.66 0.482 238     5.71     7.61
##  E4    7.22 0.508 238     6.22     8.22
##  E5    6.61 0.138 238     6.34     6.88
##  E6    6.43 0.236 238     5.97     6.90
##  E7    6.32 0.397 238     5.54     7.10
## 
## Results are averaged over the levels of: Year 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(theobald.lm2, ~ Year)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Year emmean    SE  df lower.CL upper.CL
##  1990   6.97 0.189 238     6.60     7.34
##  1991   6.75 0.170 238     6.41     7.08
##  1992   7.07 0.187 238     6.70     7.44
##  1993   5.39 0.208 238     4.98     5.80
##  1994   6.00 0.218 238     5.57     6.43
## 
## Results are averaged over the levels of: env 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;split-plot&#34;&gt;Split-plot&lt;/h4&gt;
&lt;p&gt;Load &amp;ldquo;Oats&amp;rdquo; from nlme. Nitrogen level (&amp;ldquo;nitro&amp;rdquo;) is the main plot, cultivar (&amp;ldquo;Variety&amp;rdquo;) is the sub-plot and &amp;ldquo;Block&amp;rdquo; describes the blocking layout.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(Oats) 
str(Oats)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &#39;nfnGroupedData&#39;, &#39;nfGroupedData&#39;, &#39;groupedData&#39; and &#39;data.frame&#39;:	72 obs. of  4 variables:
##  $ Block  : Ord.factor w/ 6 levels &amp;quot;VI&amp;quot;&amp;lt;&amp;quot;V&amp;quot;&amp;lt;&amp;quot;III&amp;quot;&amp;lt;..: 6 6 6 6 6 6 6 6 6 6 ...
##  $ Variety: Factor w/ 3 levels &amp;quot;Golden Rain&amp;quot;,..: 3 3 3 3 1 1 1 1 2 2 ...
##  $ nitro  : num  0 0.2 0.4 0.6 0 0.2 0.4 0.6 0 0.2 ...
##  $ yield  : num  111 130 157 174 117 114 161 141 105 140 ...
##  - attr(*, &amp;quot;formula&amp;quot;)=Class &#39;formula&#39;  language yield ~ nitro | Block
##   .. ..- attr(*, &amp;quot;.Environment&amp;quot;)=&amp;lt;environment: R_GlobalEnv&amp;gt; 
##  - attr(*, &amp;quot;labels&amp;quot;)=List of 2
##   ..$ y: chr &amp;quot;Yield&amp;quot;
##   ..$ x: chr &amp;quot;Nitrogen concentration&amp;quot;
##  - attr(*, &amp;quot;units&amp;quot;)=List of 2
##   ..$ y: chr &amp;quot;(bushels/acre)&amp;quot;
##   ..$ x: chr &amp;quot;(cwt/acre)&amp;quot;
##  - attr(*, &amp;quot;inner&amp;quot;)=Class &#39;formula&#39;  language ~Variety
##   .. ..- attr(*, &amp;quot;.Environment&amp;quot;)=&amp;lt;environment: R_GlobalEnv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;count_na(Oats)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Block Variety   nitro   yield 
##       0       0       0       0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Oats$N &amp;lt;- as.factor(Oats$nitro)
replications(yield ~ Variety*N*Block, data = Oats)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         Variety               N           Block       Variety:N   Variety:Block 
##              24              18              12               6               4 
##         N:Block Variety:N:Block 
##               3               1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(Oats$Variety, Oats$N)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              
##               0 0.2 0.4 0.6
##   Golden Rain 6   6   6   6
##   Marvellous  6   6   6   6
##   Victory     6   6   6   6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(Oats$yield, col = &amp;quot;gold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ N, data = Oats, col = &amp;quot;dodgerblue1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-31-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(yield ~ Variety, data = Oats, col = &amp;quot;red3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/anova-in-r/index_files/figure-html/unnamed-chunk-31-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Balanced Trial Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The format for specifying split-plot error terms is &lt;code&gt;Error(blocking factor/main plot)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#contrasts(&amp;quot;contr.sum&amp;quot;)
spl.oats &amp;lt;- aov(yield ~ Variety*N + Error(Block:N), data = Oats) 
summary(spl.oats)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Error: Block:N
##           Df Sum Sq Mean Sq F value  Pr(&amp;gt;F)   
## N          3  20020    6673   7.556 0.00143 **
## Residuals 20  17663     883                   
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Error: Within
##           Df Sum Sq Mean Sq F value Pr(&amp;gt;F)  
## Variety    2   1786   893.2   2.930 0.0649 .
## Variety:N  6    322    53.6   0.176 0.9818  
## Residuals 40  12194   304.8                 
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(spl.oats, &amp;quot;N&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Note: re-fitting model with sum-to-zero contrasts
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  N   emmean SE df lower.CL upper.CL
##  0     79.4  7 20     64.8       94
##  0.2   98.9  7 20     84.3      114
##  0.4  114.2  7 20     99.6      129
##  0.6  123.4  7 20    108.8      138
## 
## Results are averaged over the levels of: Variety 
## Warning: EMMs are biased unless design is perfectly balanced 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(spl.oats, ~ Variety) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Note: re-fitting model with sum-to-zero contrasts
## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Variety     emmean   SE   df lower.CL upper.CL
##  Golden Rain  104.5 4.55 46.1     95.3      114
##  Marvellous   109.8 4.55 46.1    100.6      119
##  Victory       97.6 4.55 46.1     88.5      107
## 
## Results are averaged over the levels of: N 
## Warning: EMMs are biased unless design is perfectly balanced 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Unbalanced Trial Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spl.oats2 &amp;lt;- lmer(yield ~ N*Variety + (1|Block:N), data = Oats) 
Anova(spl.oats2, type = &amp;quot;3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Analysis of Deviance Table (Type III Wald chisquare tests)
## 
## Response: yield
##               Chisq Df Pr(&amp;gt;Chisq)    
## (Intercept) 77.1670  1  &amp;lt; 2.2e-16 ***
## N           13.9028  3   0.003041 ** 
## Variety      2.2747  2   0.320663    
## N:Variety    1.0554  6   0.983423    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(spl.oats2, &amp;quot;N&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  N   emmean SE df lower.CL upper.CL
##  0     79.4  7 20     64.8       94
##  0.2   98.9  7 20     84.3      114
##  0.4  114.2  7 20     99.6      129
##  0.6  123.4  7 20    108.8      138
## 
## Results are averaged over the levels of: Variety 
## Degrees-of-freedom method: kenward-roger 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emmeans(spl.oats2, ~ Variety) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NOTE: Results may be misleading due to involvement in interactions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Variety     emmean   SE   df lower.CL upper.CL
##  Golden Rain  104.5 4.55 46.1     95.3      114
##  Marvellous   109.8 4.55 46.1    100.6      119
##  Victory       97.6 4.55 46.1     88.5      107
## 
## Results are averaged over the levels of: N 
## Degrees-of-freedom method: kenward-roger 
## Confidence level used: 0.95
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;other-designs&#34;&gt;Other Designs&lt;/h3&gt;
&lt;p&gt;There are many other experimental designs commonly used in agricultural trials (split-split plot, split-block, alpha lattice, etc). We have written an online resource for routine incorporation of spatial covariates into field trial analysis that includes information on how to &lt;a href=&#34;https://idahoagstats.github.io/guide-to-field-trial-spatial-analysis/model-extension-r.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;analyze different designs&lt;/a&gt;. You could also consider using the &lt;a href=&#34;https://CRAN.R-project.org/package=agricolae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agricolae&lt;/a&gt; package.&lt;/p&gt;
&lt;h3 id=&#34;extra-functions&#34;&gt;Extra Functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;for extracting model parameters, diagnostics and other model information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These work differently with different R object types. That is, different output will result depending on if a &amp;ldquo;lm&amp;rdquo;, &amp;ldquo;lme&amp;rdquo; or &amp;ldquo;merMod&amp;rdquo; (lmer) object is used in the function call.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# extract model summary
summary()

#extract coefficients:
coef()

#extract residuals
resid()
rstudent()
residuals()

# extract predicted values
fits()

# make diagnostic plots
plot()

# extract influence measures:
influence.measures()

#other fir diagnostics:
cooks.distance()
dffits()
dfbeta()
hat()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the all functions available for a particular type of linear model object, use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;methods(class = &amp;quot;lm&amp;quot;) # for lm objects
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] add1                addterm             alias              
##  [4] anova               Anova               attrassign         
##  [7] avPlot              Boot                bootCase           
## [10] boxcox              boxCox              brief              
## [13] case.names          ceresPlot           coerce             
## [16] concordance         confidenceEllipse   confint            
## [19] Confint             cooks.distance      crPlot             
## [22] deltaMethod         deviance            dfbeta             
## [25] dfbetaPlots         dfbetas             dfbetasPlots       
## [28] drop1               dropterm            dummy.coef         
## [31] durbinWatsonTest    effects             emm_basis          
## [34] extractAIC          family              formula            
## [37] hatvalues           hccm                infIndexPlot       
## [40] influence           influencePlot       initialize         
## [43] inverseResponsePlot kappa               labels             
## [46] leveneTest          leveragePlot        linearHypothesis   
## [49] logLik              logtrans            mcPlot             
## [52] mmp                 model.frame         model.matrix       
## [55] ncvTest             nextBoot            nobs               
## [58] outlierTest         plot                powerTransform     
## [61] predict             Predict             print              
## [64] proj                qqnorm              qqPlot             
## [67] qr                  recover_data        residualPlot       
## [70] residualPlots       residuals           rstandard          
## [73] rstudent            S                   show               
## [76] sigmaHat            simulate            slotsFromS3        
## [79] spreadLevelPlot     summary             symbox             
## [82] variable.names      vcov               
## see &#39;?methods&#39; for accessing help and source code
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;methods(class = &amp;quot;lme&amp;quot;) # for lme4 objects
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] ACF              anova            Anova            augPred         
##  [5] coef             comparePred      confint          Confint         
##  [9] deltaMethod      deviance         emm_basis        extractAIC      
## [13] fitted           fixef            formula          getData         
## [17] getGroups        getGroupsFormula getResponse      getVarCov       
## [21] influence        intervals        linearHypothesis logLik          
## [25] matchCoefs       nobs             pairs            plot            
## [29] predict          print            qqnorm           ranef           
## [33] recover_data     residuals        S                sigma           
## [37] simulate         summary          update           VarCorr         
## [41] Variogram        vcov            
## see &#39;?methods&#39; for accessing help and source code
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;methods(class = &amp;quot;merMod&amp;quot;) # for nlme objects 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] anova            Anova            as.function      coef            
##  [5] confint          cooks.distance   deltaMethod      deviance        
##  [9] df.residual      drop1            emm_basis        extractAIC      
## [13] family           fitted           fixef            formula         
## [17] getData          getL             getME            hatvalues       
## [21] influence        isGLMM           isLMM            isNLMM          
## [25] isREML           linearHypothesis logLik           matchCoefs      
## [29] model.frame      model.matrix     na.action        ngrps           
## [33] nobs             plot             predict          print           
## [37] profile          ranef            recover_data     refit           
## [41] refitML          rePCA            residuals        rstudent        
## [45] show             sigma            simulate         summary         
## [49] terms            update           VarCorr          vcov            
## [53] vif              weights         
## see &#39;?methods&#39; for accessing help and source code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package &lt;strong&gt;emmeans&lt;/strong&gt; also supports &lt;a href=&#34;https://cran.r-project.org/web/packages/emmeans/vignettes/models.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a large number of models&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting R Set Up</title>
      <link>/post/getting-r-setup/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/getting-r-setup/</guid>
      <description>&lt;h3 id=&#34;install-r&#34;&gt;Install R:&lt;/h3&gt;
&lt;p&gt;You can download R &lt;a href=&#34;https://cloud.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Get the correct R distribution for your operating system. Once downloaded, click on downloaded file, and follow the installation instructions.&lt;/p&gt;
&lt;p&gt;Note that R is updated several times per year. If your installation is a year old or more, consider updating your version of R to the latest version.&lt;/p&gt;
&lt;h3 id=&#34;install-rstudio&#34;&gt;Install RStudio&lt;/h3&gt;
&lt;p&gt;Rstudio is not R, rather, it is a user interface for accessing R. It is a complicated interface with many features for developers. Despite its complexity, RStudio is nevertheless a very helpful R user interface for users of all abilities. It can downloaded &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. For most users, the free version of &amp;ldquo;RStudio Desktop&amp;rdquo; should be chosen. Once downloaded, click on downloaded file, and follow the installation instructions.&lt;/p&gt;
&lt;h3 id=&#34;install-rtools-optional&#34;&gt;Install Rtools (optional)&lt;/h3&gt;
&lt;p&gt;Only Windows users need to consider this step. This app is for compiling R packages with C, C++ and Fortran code. It is a separate piece of software that has to be downloaded and installed (it is not an R package). Rtools is not needed by all users and if you don&amp;rsquo;t know if you need this, it is absolutely fine to skip this step.  If you do think you need this, You can find it &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Download and install.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-rstudio-setup-optional&#34;&gt;Setting up RStudio Setup (optional)&lt;/h3&gt;
&lt;p&gt;This is an optional step, but it is highly recommended. This step will prevent RStudio from saving all of your objects in a session to &lt;em&gt;.Rdata&lt;/em&gt; file that is then automatically loaded whenever you open R.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;usethis&amp;quot;); library(usethis)
usethis::use_blank_slate()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can disable this across all projects in R with the drop-down menu &lt;strong&gt;Tools&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Global Options&amp;hellip;&lt;/strong&gt; &amp;ndash;&amp;gt; unclick &amp;lsquo;&lt;strong&gt;Restore .RData into workspace at startup&lt;/strong&gt;&amp;rsquo; and set &amp;lsquo;&lt;strong&gt;Save workspace to .rRData on exit&lt;/strong&gt;&amp;rsquo; to &amp;lsquo;&lt;strong&gt;Never&lt;/strong&gt;&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Why is automatic loading of an &lt;em&gt;.Rdata&lt;/em&gt; file not recommended? Because it makes your work less reproducible. You may have created test objects that will unexpectedly interfere with downstream operations or analysis. You may have changed the original data source, but an older version is saved in the &lt;em&gt;.Rdata&lt;/em&gt; file. More explanation is given by &lt;a href=&#34;https://usethis.r-lib.org/reference/use_blank_slate.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are used to opening R and seeing all of your previous objects automatically loaded into the objects pane, this will be an adjustment. The solution is to save your processes into &lt;em&gt;.R&lt;/em&gt; scripts that capture all information from packages loaded, file import, all data manipulations and other operations important. If these steps are slow and there is a need to access intermediate objects, these can be saved in tabular formats readable by many applications (e.g. &lt;em&gt;.txt&lt;/em&gt; or &lt;em&gt;.csv&lt;/em&gt;) or saved as a specific R object (see &lt;code&gt;saveRDS()&lt;/code&gt; in the R help files) and reloaded in another session.&lt;/p&gt;
&lt;h4 id=&#34;set-up-version-control-optional&#34;&gt;Set up version control (optional)&lt;/h4&gt;
&lt;p&gt;If you use Git or SVN, you can perform Git operations directions from RStudio and interact with remote repositories. If you don&amp;rsquo;t use version control, this step can be skipped. If you do use version control, the command line or other third-party software (e.g. Gitkraken) are fine to use instead or in addition to RStudio&amp;rsquo;s interface. The implementation of git in R is very minimal and supports only a limited number of actions, so you are likely to need other software to perform complicated git actions. It is useful for file additions, commits, pushes and pulls.&lt;/p&gt;
&lt;p&gt;You can set up Git by going to &lt;strong&gt;Tools&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Global Options&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Git/SVN&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is not the right space to provide detailed instructions for using git as an R user, but Jenny Bryan has written a very helpful &lt;a href=&#34;https://happygitwithr.com/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorial&lt;/a&gt; covering this subject.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tricks and Tips for Reproducible Research in R</title>
      <link>/post/reproducible-r/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/reproducible-r/</guid>
      <description>&lt;h3 id=&#34;make-sure-your-rstudio-session-is-not-saving-rdata-automatically&#34;&gt;Make sure your Rstudio session is not saving .RData automatically:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Note: this step requires the&lt;/em&gt; &lt;strong&gt;usethis&lt;/strong&gt; &lt;em&gt;package; please install this package if you do not already have it installed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Step 1 is to disable automatic saving of your objects to a &lt;em&gt;.RData&lt;/em&gt; file. This file is automatically loaded when R restarts. Since we often create all sorts of miscellaneous objects during a session with a clear record of why, loading all objects without a clear sense of their provenance is often not reproducible by other.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usethis::use_blank_slate()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about this function in its &lt;a href=&#34;https://usethis%60.R%60-lib.org/reference/use_blank_slate.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can disable this across all projects in R with the drop-down menu &lt;strong&gt;Tools&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;em&gt;Global Options&amp;hellip;&lt;/em&gt; &amp;ndash;&amp;gt; unclick &amp;lsquo;&lt;em&gt;Restore .RData into workspace at startup&lt;/em&gt;&amp;rsquo; and set &amp;lsquo;&lt;em&gt;Save workspace to .rRData on exit&lt;/em&gt;&amp;rsquo; to &amp;lsquo;&lt;em&gt;Never&lt;/em&gt;&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;save-all-code-you-run-in-an-r-or-rmd-file&#34;&gt;Save all code you run in an &lt;em&gt;.R&lt;/em&gt; or &lt;em&gt;.Rmd&lt;/em&gt; file&lt;/h3&gt;
&lt;p&gt;This is your source code. It&amp;rsquo;s as real and as important as your input data. This file should capture a set of actions that can be repeated by another person (e.g. your PI, other colleagues yourself in the future) including packages loaded, files imported, all data manipulations and the outputs from these actions (e.g. visualisations, analytical outcomes). The idea is to capture your thought process and specific actions so this can be repeated in full. In most analyses, it is extremely likely* you will revisit a project and need to repeat what has already been done! Keeping a record of actions will save you considerable time because you will not have to attempt to recall and/or reconstruct exactly what you did in previous sessions.&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;Consider yourself very lucky if this does not happen!&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;regularly-restart-your-r-session&#34;&gt;Regularly restart your R session&lt;/h3&gt;
&lt;p&gt;Yes, that means wiping all the loaded packaged and objects from the session (if you followed the first recommendation in these instructions), but the upside is that your analysis are reproducible. This means future you can repeat those analyses and get the same results back you did earlier.&lt;/p&gt;
&lt;p&gt;You can restart R by manually closing and opening RStudio. You can also restart the R session with RStudio by navigating to the menu item &lt;strong&gt;Session&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Restart R&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;use-r-projects&#34;&gt;Use R projects&lt;/h3&gt;
&lt;p&gt;This is optional, but it will make your life easier. Whenever you start a new analytical endeavor in R, create an R project by navigating to &lt;strong&gt;File&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;New Project&lt;/strong&gt; in RStudio. There are many options available for setting the [project directory (where the &lt;em&gt;.Rproj&lt;/em&gt; file lives), the type of project (e.g. R package, Shiny app or blank), and options to initialise a git repo. The simplest option is to choose &lt;strong&gt;New Project&lt;/strong&gt; (no special type) in a dedicated directory. The main advantage of projects is that by opening an &lt;em&gt;.Rproj&lt;/em&gt; file, the working directory is automatically set to that directory. If you are using a cloud solution for working across different computers or working with collaborators, this will make things easier because you can use relative paths for importing data and outputting files. There would be no more need for this at the top of your script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setwd(&amp;quot;specific/path/to/my/computer&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, for setting up gitbooks through &amp;lsquo;bookdown&amp;rsquo;, R packages, Shiny apps, and other complicated R endeavors, the automated set-up through R projects can be immensely helpful.  This is sometimes referred to as &amp;ldquo;project-oriented workflow.&amp;rdquo; In addition to using R projects with a dedicated directory for each research project, I also prefer to have a consistent directory structure for each project like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;top-level-directory
│   README.md
│
└───data
│   │   file011.txt
│   │   file012.txt
│   │
│   └───spatial_files
│       │   file208.dbf
│       │   file208.shp
│       │   file208.shx
│   
└───scripts
│   │   eda.R
│   │   analysis.R
│   │   plots.R
│   │   final_report.Rmd
|
└───outputs
│   │   plot1.png
│   │   blups.csv
|
└───extra
    │   some_paper.pdf
    │   ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I put all raw data needed for analysis into the &amp;lsquo;data&amp;rsquo; directory, any and all programming scripts in the &amp;lsquo;scripts&amp;rsquo; directory, all outputs (plots, tables, intermediate data object) in the &amp;lsquo;outputs&amp;rsquo; directory and everything else ends up &amp;lsquo;extra&amp;rsquo;. Naturally, there are many different directory structures to use and this is just one example. Find something that works best for your needs!&lt;/p&gt;
&lt;h3 id=&#34;use-the-here-package&#34;&gt;Use the &amp;lsquo;here&amp;rsquo; package.&lt;/h3&gt;
&lt;p&gt;This is also optional. It works like R projects for setting the working directory. However, for an R project to work, you have to open the .Rproj file in RStudio. What if you or your collaborators prefer to open R files directly and start using those? Here will look for the next directory level which there is a .Rproj file and set the working directory there.&lt;/p&gt;
&lt;p&gt;If you want to import a file, &amp;ldquo;datafile.csv&amp;rdquo; that located in the data directory. Your .R script is actually located in the &amp;lsquo;scripts&amp;rsquo; directory. Normally, if you try to read that in, you need to specify the full path to &amp;ldquo;mydata.csv&amp;rdquo; or set the working directory and use a relative path. Again, these paths will not work if you switch computers or your collaborators are running these scripts on their own systems. This system gets even more complicated when working with an .Rmd file. Here&amp;rsquo;s an alternative approach that works the same across files and systems:&lt;/p&gt;
&lt;p&gt;First, make sure you have .Rproj file to define the top-level directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(here)
mydata &amp;lt;- read.csv(here(&amp;quot;data&amp;quot;, &amp;quot;datafile.csv&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code will construct this path: &amp;ldquo;data/datafile.csv&amp;rdquo; and execute that command under the assumption that wherever that .rproj is located (going up one directory at a time until it finds it) is where the working directory is set. Putting &lt;code&gt;library(here)&lt;/code&gt; into every .R or .Rmd file in a project will resolve these issues.&lt;/p&gt;
&lt;h3 id=&#34;use-r-environments&#34;&gt;Use R environments.&lt;/h3&gt;
&lt;p&gt;Again: optional, but it will make your life easier.&lt;/p&gt;
&lt;p&gt;Often in academia, I might do an analysis, move on to something else and then have to return that analysis months or years later. I probably will have updated R and some or all of the packages used in that analysis. As a result of these updates, my original code may not work at all or may not do the intended actions. What I need are both the older version of R and the older packages. The package &amp;lsquo;renv&amp;rsquo; is a solution. It captures the versions of R and the loaded packages. It also builds a custom package library for your package (and caches this information across other projects using &lt;code&gt;renv&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Start here:
&lt;em&gt;(you need to also be using Rprojects since&lt;/em&gt; &lt;strong&gt;renv&lt;/strong&gt; &lt;em&gt;is searching for .Rproj file)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(renv)
renv::init()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a mature project that&amp;rsquo;s not undergoing any further development at this time, this is all you need to do.&lt;/p&gt;
&lt;p&gt;If you continue to develop your project and install new packages, update your R environment like thus to ensure new or updated packaged are included:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;renv::snapshot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with &lt;strong&gt;Packrat&lt;/strong&gt;, this is a replacement for that. This is particularly helpful for things that may have a long life span, like Shiny apps. The &lt;a href=&#34;https://rstudio.github.io/renv/articles/renv.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;renv package&lt;/a&gt; has extensive documentation worth reading.&lt;/p&gt;
&lt;h3 id=&#34;final-comments&#34;&gt;Final Comments&lt;/h3&gt;
&lt;p&gt;There are many more resources and recommendations for conducting reproducible research in R. There an entire &lt;a href=&#34;https://cran%60.R%60-project.org/web/views/ReproducibleResearch.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN task view&lt;/a&gt; devoted to this!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
